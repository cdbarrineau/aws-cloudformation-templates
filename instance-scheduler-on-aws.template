{
 "Description": "(SO0030) instance-scheduler-on-aws v3.0.8",
 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterLabels": {
    "TagName": {
     "default": "Schedule tag key"
    },
    "SchedulerFrequency": {
     "default": "Scheduling interval (minutes)"
    },
    "DefaultTimezone": {
     "default": "Default time zone"
    },
    "SchedulingActive": {
     "default": "Enable scheduling"
    },
    "ScheduleEC2": {
     "default": "Enable EC2 scheduling"
    },
    "ScheduleRds": {
     "default": "Enable RDS instance scheduling"
    },
    "EnableRdsClusterScheduling": {
     "default": "Enable RDS cluster scheduling"
    },
    "ScheduleNeptune": {
     "default": "Enable Neptune cluster scheduling"
    },
    "ScheduleDocDb": {
     "default": "Enable DocumentDB cluster scheduling"
    },
    "ScheduleASGs": {
     "default": "Enable AutoScaling Group scheduling"
    },
    "StartedTags": {
     "default": "Start tags"
    },
    "StoppedTags": {
     "default": "Stop tags"
    },
    "EnableSSMMaintenanceWindows": {
     "default": "Enable EC2 SSM Maintenance Windows"
    },
    "KmsKeyArns": {
     "default": "Kms Key Arns for EC2"
    },
    "CreateRdsSnapshot": {
     "default": "Create RDS instance snapshots on stop"
    },
    "AsgScheduledTagKey": {
     "default": "ASG scheduled tag key"
    },
    "AsgRulePrefix": {
     "default": "ASG action name prefix"
    },
    "UsingAWSOrganizations": {
     "default": "Use AWS Organizations"
    },
    "Namespace": {
     "default": "Namespace"
    },
    "Principals": {
     "default": "Organization ID/remote account IDs"
    },
    "Regions": {
     "default": "Region(s)"
    },
    "ScheduleLambdaAccount": {
     "default": "Enable hub account scheduling"
    },
    "LogRetentionDays": {
     "default": "Log retention period (days)"
    },
    "Trace": {
     "default": "Enable CloudWatch debug Logs"
    },
    "OpsMonitoring": {
     "default": "Operational Monitoring"
    },
    "MemorySize": {
     "default": "SchedulingRequestHandler Memory size (MB)"
    },
    "AsgMemorySize": {
     "default": "AsgHandler Memory size (MB)"
    },
    "OrchestratorMemorySize": {
     "default": "Orchestrator Memory size (MB)"
    },
    "ddbDeletionProtection": {
     "default": "Protect DynamoDB Tables"
    }
   },
   "ParameterGroups": [
    {
     "Label": {
      "default": "Scheduler (v3.0.8)"
     },
     "Parameters": [
      "TagName",
      "SchedulerFrequency",
      "DefaultTimezone",
      "SchedulingActive"
     ]
    },
    {
     "Label": {
      "default": "Services"
     },
     "Parameters": [
      "ScheduleEC2",
      "ScheduleRds",
      "EnableRdsClusterScheduling",
      "ScheduleNeptune",
      "ScheduleDocDb",
      "ScheduleASGs"
     ]
    },
    {
     "Label": {
      "default": "Tagging"
     },
     "Parameters": [
      "StartedTags",
      "StoppedTags"
     ]
    },
    {
     "Label": {
      "default": "Service-specific"
     },
     "Parameters": [
      "EnableSSMMaintenanceWindows",
      "KmsKeyArns",
      "CreateRdsSnapshot",
      "AsgScheduledTagKey",
      "AsgRulePrefix"
     ]
    },
    {
     "Label": {
      "default": "Account structure"
     },
     "Parameters": [
      "UsingAWSOrganizations",
      "Namespace",
      "Principals",
      "Regions",
      "ScheduleLambdaAccount"
     ]
    },
    {
     "Label": {
      "default": "Monitoring"
     },
     "Parameters": [
      "LogRetentionDays",
      "Trace",
      "OpsMonitoring"
     ]
    },
    {
     "Label": {
      "default": "Other"
     },
     "Parameters": [
      "MemorySize",
      "AsgMemorySize",
      "OrchestratorMemorySize",
      "ddbDeletionProtection"
     ]
    }
   ]
  },
  "cdk_nag": {
   "rules_to_suppress": [
    {
     "reason": "Python 3.11 is the newest available runtime. This finding is a false positive.",
     "id": "AwsSolutions-L1"
    }
   ]
  }
 },
 "Parameters": {
  "TagName": {
   "Type": "String",
   "Default": "Schedule",
   "Description": "The tag key Instance Scheduler will read to determine the schedule for a resource. The value of the tag with this key on a resource specifies the name of the schedule.",
   "MaxLength": 127,
   "MinLength": 1
  },
  "SchedulerFrequency": {
   "Type": "Number",
   "Default": "5",
   "AllowedValues": [
    "1",
    "2",
    "5",
    "10",
    "15",
    "30",
    "60"
   ],
   "Description": "Interval in minutes between scheduler executions. For EC2 and RDS"
  },
  "DefaultTimezone": {
   "Type": "String",
   "Default": "UTC",
   "AllowedValues": [
    "Africa/Abidjan",
    "Africa/Accra",
    "Africa/Addis_Ababa",
    "Africa/Algiers",
    "Africa/Asmara",
    "Africa/Bamako",
    "Africa/Bangui",
    "Africa/Banjul",
    "Africa/Bissau",
    "Africa/Blantyre",
    "Africa/Brazzaville",
    "Africa/Bujumbura",
    "Africa/Cairo",
    "Africa/Casablanca",
    "Africa/Ceuta",
    "Africa/Conakry",
    "Africa/Dakar",
    "Africa/Dar_es_Salaam",
    "Africa/Djibouti",
    "Africa/Douala",
    "Africa/El_Aaiun",
    "Africa/Freetown",
    "Africa/Gaborone",
    "Africa/Harare",
    "Africa/Johannesburg",
    "Africa/Juba",
    "Africa/Kampala",
    "Africa/Khartoum",
    "Africa/Kigali",
    "Africa/Kinshasa",
    "Africa/Lagos",
    "Africa/Libreville",
    "Africa/Lome",
    "Africa/Luanda",
    "Africa/Lubumbashi",
    "Africa/Lusaka",
    "Africa/Malabo",
    "Africa/Maputo",
    "Africa/Maseru",
    "Africa/Mbabane",
    "Africa/Mogadishu",
    "Africa/Monrovia",
    "Africa/Nairobi",
    "Africa/Ndjamena",
    "Africa/Niamey",
    "Africa/Nouakchott",
    "Africa/Ouagadougou",
    "Africa/Porto-Novo",
    "Africa/Sao_Tome",
    "Africa/Tripoli",
    "Africa/Tunis",
    "Africa/Windhoek",
    "America/Adak",
    "America/Anchorage",
    "America/Anguilla",
    "America/Antigua",
    "America/Araguaina",
    "America/Argentina/Buenos_Aires",
    "America/Argentina/Catamarca",
    "America/Argentina/Cordoba",
    "America/Argentina/Jujuy",
    "America/Argentina/La_Rioja",
    "America/Argentina/Mendoza",
    "America/Argentina/Rio_Gallegos",
    "America/Argentina/Salta",
    "America/Argentina/San_Juan",
    "America/Argentina/San_Luis",
    "America/Argentina/Tucuman",
    "America/Argentina/Ushuaia",
    "America/Aruba",
    "America/Asuncion",
    "America/Atikokan",
    "America/Bahia",
    "America/Bahia_Banderas",
    "America/Barbados",
    "America/Belem",
    "America/Belize",
    "America/Blanc-Sablon",
    "America/Boa_Vista",
    "America/Bogota",
    "America/Boise",
    "America/Cambridge_Bay",
    "America/Campo_Grande",
    "America/Cancun",
    "America/Caracas",
    "America/Cayenne",
    "America/Cayman",
    "America/Chicago",
    "America/Chihuahua",
    "America/Costa_Rica",
    "America/Creston",
    "America/Cuiaba",
    "America/Curacao",
    "America/Danmarkshavn",
    "America/Dawson",
    "America/Dawson_Creek",
    "America/Denver",
    "America/Detroit",
    "America/Dominica",
    "America/Edmonton",
    "America/Eirunepe",
    "America/El_Salvador",
    "America/Fortaleza",
    "America/Glace_Bay",
    "America/Godthab",
    "America/Goose_Bay",
    "America/Grand_Turk",
    "America/Grenada",
    "America/Guadeloupe",
    "America/Guatemala",
    "America/Guayaquil",
    "America/Guyana",
    "America/Halifax",
    "America/Havana",
    "America/Hermosillo",
    "America/Indiana/Indianapolis",
    "America/Indiana/Knox",
    "America/Indiana/Marengo",
    "America/Indiana/Petersburg",
    "America/Indiana/Tell_City",
    "America/Indiana/Vevay",
    "America/Indiana/Vincennes",
    "America/Indiana/Winamac",
    "America/Inuvik",
    "America/Iqaluit",
    "America/Jamaica",
    "America/Juneau",
    "America/Kentucky/Louisville",
    "America/Kentucky/Monticello",
    "America/Kralendijk",
    "America/La_Paz",
    "America/Lima",
    "America/Los_Angeles",
    "America/Lower_Princes",
    "America/Maceio",
    "America/Managua",
    "America/Manaus",
    "America/Marigot",
    "America/Martinique",
    "America/Matamoros",
    "America/Mazatlan",
    "America/Menominee",
    "America/Merida",
    "America/Metlakatla",
    "America/Mexico_City",
    "America/Miquelon",
    "America/Moncton",
    "America/Monterrey",
    "America/Montevideo",
    "America/Montreal",
    "America/Montserrat",
    "America/Nassau",
    "America/New_York",
    "America/Nipigon",
    "America/Nome",
    "America/Noronha",
    "America/North_Dakota/Beulah",
    "America/North_Dakota/Center",
    "America/North_Dakota/New_Salem",
    "America/Ojinaga",
    "America/Panama",
    "America/Pangnirtung",
    "America/Paramaribo",
    "America/Phoenix",
    "America/Port-au-Prince",
    "America/Port_of_Spain",
    "America/Porto_Velho",
    "America/Puerto_Rico",
    "America/Rainy_River",
    "America/Rankin_Inlet",
    "America/Recife",
    "America/Regina",
    "America/Resolute",
    "America/Rio_Branco",
    "America/Santa_Isabel",
    "America/Santarem",
    "America/Santiago",
    "America/Santo_Domingo",
    "America/Sao_Paulo",
    "America/Scoresbysund",
    "America/Sitka",
    "America/St_Barthelemy",
    "America/St_Johns",
    "America/St_Kitts",
    "America/St_Lucia",
    "America/St_Thomas",
    "America/St_Vincent",
    "America/Swift_Current",
    "America/Tegucigalpa",
    "America/Thule",
    "America/Thunder_Bay",
    "America/Tijuana",
    "America/Toronto",
    "America/Tortola",
    "America/Vancouver",
    "America/Whitehorse",
    "America/Winnipeg",
    "America/Yakutat",
    "America/Yellowknife",
    "Antarctica/Casey",
    "Antarctica/Davis",
    "Antarctica/DumontDUrville",
    "Antarctica/Macquarie",
    "Antarctica/Mawson",
    "Antarctica/McMurdo",
    "Antarctica/Palmer",
    "Antarctica/Rothera",
    "Antarctica/Syowa",
    "Antarctica/Vostok",
    "Arctic/Longyearbyen",
    "Asia/Aden",
    "Asia/Almaty",
    "Asia/Amman",
    "Asia/Anadyr",
    "Asia/Aqtau",
    "Asia/Aqtobe",
    "Asia/Ashgabat",
    "Asia/Baghdad",
    "Asia/Bahrain",
    "Asia/Baku",
    "Asia/Bangkok",
    "Asia/Beirut",
    "Asia/Bishkek",
    "Asia/Brunei",
    "Asia/Choibalsan",
    "Asia/Chongqing",
    "Asia/Colombo",
    "Asia/Damascus",
    "Asia/Dhaka",
    "Asia/Dili",
    "Asia/Dubai",
    "Asia/Dushanbe",
    "Asia/Gaza",
    "Asia/Harbin",
    "Asia/Hebron",
    "Asia/Ho_Chi_Minh",
    "Asia/Hong_Kong",
    "Asia/Hovd",
    "Asia/Irkutsk",
    "Asia/Jakarta",
    "Asia/Jayapura",
    "Asia/Jerusalem",
    "Asia/Kabul",
    "Asia/Kamchatka",
    "Asia/Karachi",
    "Asia/Kashgar",
    "Asia/Kathmandu",
    "Asia/Khandyga",
    "Asia/Kolkata",
    "Asia/Krasnoyarsk",
    "Asia/Kuala_Lumpur",
    "Asia/Kuching",
    "Asia/Kuwait",
    "Asia/Macau",
    "Asia/Magadan",
    "Asia/Makassar",
    "Asia/Manila",
    "Asia/Muscat",
    "Asia/Nicosia",
    "Asia/Novokuznetsk",
    "Asia/Novosibirsk",
    "Asia/Omsk",
    "Asia/Oral",
    "Asia/Phnom_Penh",
    "Asia/Pontianak",
    "Asia/Pyongyang",
    "Asia/Qatar",
    "Asia/Qyzylorda",
    "Asia/Rangoon",
    "Asia/Riyadh",
    "Asia/Sakhalin",
    "Asia/Samarkand",
    "Asia/Seoul",
    "Asia/Shanghai",
    "Asia/Singapore",
    "Asia/Taipei",
    "Asia/Tashkent",
    "Asia/Tbilisi",
    "Asia/Tehran",
    "Asia/Thimphu",
    "Asia/Tokyo",
    "Asia/Ulaanbaatar",
    "Asia/Urumqi",
    "Asia/Ust-Nera",
    "Asia/Vientiane",
    "Asia/Vladivostok",
    "Asia/Yakutsk",
    "Asia/Yekaterinburg",
    "Asia/Yerevan",
    "Atlantic/Azores",
    "Atlantic/Bermuda",
    "Atlantic/Canary",
    "Atlantic/Cape_Verde",
    "Atlantic/Faroe",
    "Atlantic/Madeira",
    "Atlantic/Reykjavik",
    "Atlantic/South_Georgia",
    "Atlantic/St_Helena",
    "Atlantic/Stanley",
    "Australia/Adelaide",
    "Australia/Brisbane",
    "Australia/Broken_Hill",
    "Australia/Currie",
    "Australia/Darwin",
    "Australia/Eucla",
    "Australia/Hobart",
    "Australia/Lindeman",
    "Australia/Lord_Howe",
    "Australia/Melbourne",
    "Australia/Perth",
    "Australia/Sydney",
    "Canada/Atlantic",
    "Canada/Central",
    "Canada/Eastern",
    "Canada/Mountain",
    "Canada/Newfoundland",
    "Canada/Pacific",
    "Europe/Amsterdam",
    "Europe/Andorra",
    "Europe/Athens",
    "Europe/Belgrade",
    "Europe/Berlin",
    "Europe/Bratislava",
    "Europe/Brussels",
    "Europe/Bucharest",
    "Europe/Budapest",
    "Europe/Busingen",
    "Europe/Chisinau",
    "Europe/Copenhagen",
    "Europe/Dublin",
    "Europe/Gibraltar",
    "Europe/Guernsey",
    "Europe/Helsinki",
    "Europe/Isle_of_Man",
    "Europe/Istanbul",
    "Europe/Jersey",
    "Europe/Kaliningrad",
    "Europe/Kiev",
    "Europe/Lisbon",
    "Europe/Ljubljana",
    "Europe/London",
    "Europe/Luxembourg",
    "Europe/Madrid",
    "Europe/Malta",
    "Europe/Mariehamn",
    "Europe/Minsk",
    "Europe/Monaco",
    "Europe/Moscow",
    "Europe/Oslo",
    "Europe/Paris",
    "Europe/Podgorica",
    "Europe/Prague",
    "Europe/Riga",
    "Europe/Rome",
    "Europe/Samara",
    "Europe/San_Marino",
    "Europe/Sarajevo",
    "Europe/Simferopol",
    "Europe/Skopje",
    "Europe/Sofia",
    "Europe/Stockholm",
    "Europe/Tallinn",
    "Europe/Tirane",
    "Europe/Uzhgorod",
    "Europe/Vaduz",
    "Europe/Vatican",
    "Europe/Vienna",
    "Europe/Vilnius",
    "Europe/Volgograd",
    "Europe/Warsaw",
    "Europe/Zagreb",
    "Europe/Zaporozhye",
    "Europe/Zurich",
    "GMT",
    "Indian/Antananarivo",
    "Indian/Chagos",
    "Indian/Christmas",
    "Indian/Cocos",
    "Indian/Comoro",
    "Indian/Kerguelen",
    "Indian/Mahe",
    "Indian/Maldives",
    "Indian/Mauritius",
    "Indian/Mayotte",
    "Indian/Reunion",
    "Pacific/Apia",
    "Pacific/Auckland",
    "Pacific/Chatham",
    "Pacific/Chuuk",
    "Pacific/Easter",
    "Pacific/Efate",
    "Pacific/Enderbury",
    "Pacific/Fakaofo",
    "Pacific/Fiji",
    "Pacific/Funafuti",
    "Pacific/Galapagos",
    "Pacific/Gambier",
    "Pacific/Guadalcanal",
    "Pacific/Guam",
    "Pacific/Honolulu",
    "Pacific/Johnston",
    "Pacific/Kiritimati",
    "Pacific/Kosrae",
    "Pacific/Kwajalein",
    "Pacific/Majuro",
    "Pacific/Marquesas",
    "Pacific/Midway",
    "Pacific/Nauru",
    "Pacific/Niue",
    "Pacific/Norfolk",
    "Pacific/Noumea",
    "Pacific/Pago_Pago",
    "Pacific/Palau",
    "Pacific/Pitcairn",
    "Pacific/Pohnpei",
    "Pacific/Port_Moresby",
    "Pacific/Rarotonga",
    "Pacific/Saipan",
    "Pacific/Tahiti",
    "Pacific/Tarawa",
    "Pacific/Tongatapu",
    "Pacific/Wake",
    "Pacific/Wallis",
    "US/Alaska",
    "US/Arizona",
    "US/Central",
    "US/Eastern",
    "US/Hawaii",
    "US/Mountain",
    "US/Pacific",
    "UTC"
   ],
   "Description": "Default IANA time zone identifier used by schedules that do not specify a time zone."
  },
  "SchedulingActive": {
   "Type": "String",
   "Default": "Yes",
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Description": "Set to \"No\" to disable scheduling for all services."
  },
  "ScheduleEC2": {
   "Type": "String",
   "Default": "Enabled",
   "AllowedValues": [
    "Enabled",
    "Disabled"
   ],
   "Description": "Enable scheduling EC2 instances."
  },
  "ScheduleRds": {
   "Type": "String",
   "Default": "Enabled",
   "AllowedValues": [
    "Enabled",
    "Disabled"
   ],
   "Description": "Enable scheduling individual RDS instances (not clusters)."
  },
  "EnableRdsClusterScheduling": {
   "Type": "String",
   "Default": "Enabled",
   "AllowedValues": [
    "Enabled",
    "Disabled"
   ],
   "Description": "Enable scheduling RDS clusters (multi-AZ and Aurora)."
  },
  "ScheduleNeptune": {
   "Type": "String",
   "Default": "Enabled",
   "AllowedValues": [
    "Enabled",
    "Disabled"
   ],
   "Description": "Enable scheduling Neptune clusters."
  },
  "ScheduleDocDb": {
   "Type": "String",
   "Default": "Enabled",
   "AllowedValues": [
    "Enabled",
    "Disabled"
   ],
   "Description": "Enable scheduling DocumentDB clusters."
  },
  "ScheduleASGs": {
   "Type": "String",
   "Default": "Enabled",
   "AllowedValues": [
    "Enabled",
    "Disabled"
   ],
   "Description": "Enable scheduling AutoScaling Groups"
  },
  "StartedTags": {
   "Type": "String",
   "Default": "InstanceScheduler-LastAction=Started By {scheduler} {year}-{month}-{day} {hour}:{minute} {timezone}",
   "Description": "Comma-separated list of tag keys and values of the format key=value, key=value,... that are set on started instances. Leave blank to disable."
  },
  "StoppedTags": {
   "Type": "String",
   "Default": "InstanceScheduler-LastAction=Stopped By {scheduler} {year}-{month}-{day} {hour}:{minute} {timezone}",
   "Description": "Comma-separated list of tag keys and values of the format key=value, key=value,... that are set on stopped instances. Leave blank to disable."
  },
  "EnableSSMMaintenanceWindows": {
   "Type": "String",
   "Default": "No",
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Description": "Allow schedules to specify a maintenance window name. Instance Scheduler will ensure the instance is running during that maintenance window."
  },
  "KmsKeyArns": {
   "Type": "CommaDelimitedList",
   "Default": "",
   "Description": "comma-separated list of kms arns to grant Instance Scheduler kms:CreateGrant permissions to provide the EC2  service with Decrypt permissions for encrypted EBS volumes. This allows the scheduler to start EC2 instances with attached encrypted EBS volumes. provide just (*) to give limited access to all kms keys, leave blank to disable. For details on the exact policy created, refer to security section of the implementation guide (https://aws.amazon.com/solutions/implementations/instance-scheduler-on-aws/)"
  },
  "CreateRdsSnapshot": {
   "Type": "String",
   "Default": "No",
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Description": "Create snapshots before stopping RDS instances (not clusters)."
  },
  "AsgScheduledTagKey": {
   "Type": "String",
   "Default": "scheduled",
   "Description": "Key for the tag Instance Scheduler will add to scheduled AutoScaling Groups"
  },
  "AsgRulePrefix": {
   "Type": "String",
   "Default": "is-",
   "Description": "The prefix Instance Scheduler will use when naming Scheduled Scaling actions for AutoScaling Groups. Actions with this prefix will be added and removed by Instance Scheduler as needed."
  },
  "UsingAWSOrganizations": {
   "Type": "String",
   "Default": "No",
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Description": "Deploy resources to enable automatic spoke stack registration using AWS Organizations."
  },
  "Namespace": {
   "Type": "String",
   "Default": "default",
   "Description": "Unique identifier per deployment. Cannot contain spaces."
  },
  "Principals": {
   "Type": "CommaDelimitedList",
   "Default": "",
   "Description": "(Required) If using AWS Organizations, provide the Organization ID. Eg. o-xxxxyyy. Else, provide a comma-separated list of spoke account ids to schedule. Eg.: 1111111111, 2222222222 or {param: ssm-param-name}"
  },
  "Regions": {
   "Type": "CommaDelimitedList",
   "Default": "",
   "Description": "Comma-separated List of regions in which resources should be scheduled. Leave blank for current region only."
  },
  "ScheduleLambdaAccount": {
   "Type": "String",
   "Default": "Yes",
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Description": "Enable scheduling in this account."
  },
  "LogRetentionDays": {
   "Type": "Number",
   "Default": 30,
   "AllowedValues": [
    "1",
    "3",
    "5",
    "7",
    "14",
    "30",
    "60",
    "90",
    "120",
    "150",
    "180",
    "365",
    "400",
    "545",
    "731",
    "1827",
    "3653"
   ],
   "Description": "Retention period in days for logs."
  },
  "Trace": {
   "Type": "String",
   "Default": "No",
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Description": "Enable debug-level logging in CloudWatch Logs."
  },
  "OpsMonitoring": {
   "Type": "String",
   "Default": "Enabled",
   "AllowedValues": [
    "Enabled",
    "Disabled"
   ],
   "Description": "Deploy operational metrics and an Ops Monitoring Dashboard to Cloudwatch"
  },
  "MemorySize": {
   "Type": "Number",
   "Default": 128,
   "AllowedValues": [
    "128",
    "384",
    "512",
    "640",
    "768",
    "896",
    "1024",
    "1152",
    "1280",
    "1408",
    "1536"
   ],
   "Description": "Memory size of the Lambda function that schedules EC2 and RDS resources. Increase if you are experiencing high memory usage or timeouts."
  },
  "AsgMemorySize": {
   "Type": "Number",
   "Default": 128,
   "AllowedValues": [
    "128",
    "384",
    "512",
    "640",
    "768",
    "896",
    "1024",
    "1152",
    "1280",
    "1408",
    "1536"
   ],
   "Description": "Memory size of the Lambda function that schedules ASG resources. Increase if you are experiencing high memory usage or timeouts."
  },
  "OrchestratorMemorySize": {
   "Type": "Number",
   "Default": 128,
   "AllowedValues": [
    "128",
    "384",
    "512",
    "640",
    "768",
    "896",
    "1024",
    "1152",
    "1280",
    "1408",
    "1536"
   ],
   "Description": "Memory size of the Lambda functions that coordinate multi-account, multi-region scheduling for the other scheduling lambdas. Increase if you are experiencing high memory usage or timeouts."
  },
  "ddbDeletionProtection": {
   "Type": "String",
   "Default": "Enabled",
   "AllowedValues": [
    "Enabled",
    "Disabled"
   ],
   "Description": "Enable deletion protection for DynamoDB tables used by the solution. This will cause the tables to be retained when deleting this stack. To delete the tables when deleting this stack, first disable this parameter."
  }
 },
 "Mappings": {
  "Send": {
   "AnonymousUsage": {
    "Data": "Yes"
   }
  },
  "AppRegistryForInstanceSchedulerSolution25A90F05": {
   "Data": {
    "ID": "SO0030",
    "Version": "v3.0.8",
    "AppRegistryApplicationName": "instance-scheduler-on-aws",
    "SolutionName": "instance-scheduler-on-aws",
    "ApplicationType": "AWS-Solutions"
   }
  },
  "CronExpressionsForSchedulingIntervals": {
   "IntervalMinutesToCron": {
    "1": "cron(0/1 * * * ? *)",
    "2": "cron(0/2 * * * ? *)",
    "5": "cron(0/5 * * * ? *)",
    "10": "cron(0/10 * * * ? *)",
    "15": "cron(0/15 * * * ? *)",
    "30": "cron(0/30 * * * ? *)",
    "60": "cron(0 0/1 * * ? *)"
   }
  },
  "MetricsSchedulingIntervalToSeconds": {
   "MinutesToSeconds": {
    "1": "60",
    "2": "120",
    "5": "300",
    "10": "600",
    "15": "900",
    "30": "1800",
    "60": "3600"
   }
  }
 },
 "Conditions": {
  "AnonymizedMetricsEnabled": {
   "Fn::Equals": [
    {
     "Fn::FindInMap": [
      "Send",
      "AnonymousUsage",
      "Data"
     ]
    },
    "Yes"
   ]
  },
  "SchedulingActiveCondition": {
   "Fn::Equals": [
    {
     "Ref": "SchedulingActive"
    },
    "Yes"
   ]
  },
  "TraceCondition": {
   "Fn::Equals": [
    {
     "Ref": "Trace"
    },
    "Yes"
   ]
  },
  "ScheduleEC2Condition": {
   "Fn::Equals": [
    {
     "Ref": "ScheduleEC2"
    },
    "Enabled"
   ]
  },
  "ScheduleRdsCondition": {
   "Fn::Equals": [
    {
     "Ref": "ScheduleRds"
    },
    "Enabled"
   ]
  },
  "EnableRdsClusterSchedulingCondition": {
   "Fn::Equals": [
    {
     "Ref": "EnableRdsClusterScheduling"
    },
    "Enabled"
   ]
  },
  "ScheduleNeptuneCondition": {
   "Fn::Equals": [
    {
     "Ref": "ScheduleNeptune"
    },
    "Enabled"
   ]
  },
  "ScheduleDocDbCondition": {
   "Fn::Equals": [
    {
     "Ref": "ScheduleDocDb"
    },
    "Enabled"
   ]
  },
  "CreateRdsSnapshotCondition": {
   "Fn::Equals": [
    {
     "Ref": "CreateRdsSnapshot"
    },
    "Yes"
   ]
  },
  "ScheduleLambdaAccountCondition": {
   "Fn::Equals": [
    {
     "Ref": "ScheduleLambdaAccount"
    },
    "Yes"
   ]
  },
  "EnableSSMMaintenanceWindowsCondition": {
   "Fn::Equals": [
    {
     "Ref": "EnableSSMMaintenanceWindows"
    },
    "Yes"
   ]
  },
  "UsingAWSOrganizationsCondition": {
   "Fn::Equals": [
    {
     "Ref": "UsingAWSOrganizations"
    },
    "Yes"
   ]
  },
  "OpsMonitoringCondition": {
   "Fn::Equals": [
    {
     "Ref": "OpsMonitoring"
    },
    "Enabled"
   ]
  },
  "ddbDeletionProtectionCondition": {
   "Fn::Equals": [
    {
     "Ref": "ddbDeletionProtection"
    },
    "Enabled"
   ]
  },
  "ScheduleASGsCondition": {
   "Fn::Equals": [
    {
     "Ref": "ScheduleASGs"
    },
    "Enabled"
   ]
  },
  "SchedulerRolekmsAccessCondition93ED0C6C": {
   "Fn::Not": [
    {
     "Fn::Equals": [
      {
       "Fn::Select": [
        0,
        {
         "Ref": "KmsKeyArns"
        }
       ]
      },
      ""
     ]
    }
   ]
  }
 },
 "Resources": {
  "AppRegistry968496A3": {
   "Type": "AWS::ServiceCatalogAppRegistry::Application",
   "Properties": {
    "Description": {
     "Fn::Join": [
      "",
      [
       "Service Catalog application to track and manage all your resources for the solution ",
       {
        "Fn::FindInMap": [
         "AppRegistryForInstanceSchedulerSolution25A90F05",
         "Data",
         "SolutionName"
        ]
       }
      ]
     ]
    },
    "Name": {
     "Fn::Join": [
      "-",
      [
       {
        "Fn::FindInMap": [
         "AppRegistryForInstanceSchedulerSolution25A90F05",
         "Data",
         "AppRegistryApplicationName"
        ]
       },
       {
        "Ref": "AWS::Region"
       },
       {
        "Ref": "AWS::AccountId"
       },
       {
        "Ref": "AWS::StackName"
       }
      ]
     ]
    },
    "Tags": {
     "Solutions:ApplicationType": {
      "Fn::FindInMap": [
       "AppRegistryForInstanceSchedulerSolution25A90F05",
       "Data",
       "ApplicationType"
      ]
     },
     "Solutions:SolutionID": {
      "Fn::FindInMap": [
       "AppRegistryForInstanceSchedulerSolution25A90F05",
       "Data",
       "ID"
      ]
     },
     "Solutions:SolutionName": {
      "Fn::FindInMap": [
       "AppRegistryForInstanceSchedulerSolution25A90F05",
       "Data",
       "SolutionName"
      ]
     },
     "Solutions:SolutionVersion": {
      "Fn::FindInMap": [
       "AppRegistryForInstanceSchedulerSolution25A90F05",
       "Data",
       "Version"
      ]
     }
    }
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/AppRegistry/Resource"
   }
  },
  "AppRegistryDefaultApplicationAttributes15279635": {
   "Type": "AWS::ServiceCatalogAppRegistry::AttributeGroup",
   "Properties": {
    "Attributes": {
     "applicationType": {
      "Fn::FindInMap": [
       "AppRegistryForInstanceSchedulerSolution25A90F05",
       "Data",
       "ApplicationType"
      ]
     },
     "version": {
      "Fn::FindInMap": [
       "AppRegistryForInstanceSchedulerSolution25A90F05",
       "Data",
       "Version"
      ]
     },
     "solutionID": {
      "Fn::FindInMap": [
       "AppRegistryForInstanceSchedulerSolution25A90F05",
       "Data",
       "ID"
      ]
     },
     "solutionName": {
      "Fn::FindInMap": [
       "AppRegistryForInstanceSchedulerSolution25A90F05",
       "Data",
       "SolutionName"
      ]
     }
    },
    "Description": "Attribute group for solution information",
    "Name": {
     "Fn::Join": [
      "",
      [
       "attgroup-",
       {
        "Fn::Join": [
         "-",
         [
          {
           "Ref": "AWS::Region"
          },
          {
           "Ref": "AWS::StackName"
          }
         ]
        ]
       }
      ]
     ]
    },
    "Tags": {
     "Solutions:ApplicationType": {
      "Fn::FindInMap": [
       "AppRegistryForInstanceSchedulerSolution25A90F05",
       "Data",
       "ApplicationType"
      ]
     },
     "Solutions:SolutionID": {
      "Fn::FindInMap": [
       "AppRegistryForInstanceSchedulerSolution25A90F05",
       "Data",
       "ID"
      ]
     },
     "Solutions:SolutionName": {
      "Fn::FindInMap": [
       "AppRegistryForInstanceSchedulerSolution25A90F05",
       "Data",
       "SolutionName"
      ]
     },
     "Solutions:SolutionVersion": {
      "Fn::FindInMap": [
       "AppRegistryForInstanceSchedulerSolution25A90F05",
       "Data",
       "Version"
      ]
     }
    }
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/AppRegistry/DefaultApplicationAttributes/Resource"
   }
  },
  "AppRegistryAttributeGroupAssociation766a315fe0bc7110FB99": {
   "Type": "AWS::ServiceCatalogAppRegistry::AttributeGroupAssociation",
   "Properties": {
    "Application": {
     "Fn::GetAtt": [
      "AppRegistry968496A3",
      "Id"
     ]
    },
    "AttributeGroup": {
     "Fn::GetAtt": [
      "AppRegistryDefaultApplicationAttributes15279635",
      "Id"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/AppRegistry/AttributeGroupAssociation766a315fe0bc"
   }
  },
  "AppRegistryAssociation": {
   "Type": "AWS::ServiceCatalogAppRegistry::ResourceAssociation",
   "Properties": {
    "Application": {
     "Fn::GetAtt": [
      "AppRegistry968496A3",
      "Id"
     ]
    },
    "Resource": {
     "Ref": "AWS::StackId"
    },
    "ResourceType": "CFN_STACK"
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/AppRegistryAssociation"
   }
  },
  "MetricsGeneratorRole83735CC4": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/MetricsGeneratorRole/Resource"
   }
  },
  "MetricsGeneratorRoleDefaultPolicy19F5F29A": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "xray:PutTraceSegments",
        "xray:PutTelemetryRecords"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "MetricsGeneratorRoleDefaultPolicy19F5F29A",
    "Roles": [
     {
      "Ref": "MetricsGeneratorRole83735CC4"
     }
    ]
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "Wildcard required for xray"
      }
     ]
    },
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "required for xray",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      }
     ]
    }
   }
  },
  "MetricsUuidGenerator172A04DB": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     "S3Key": "instance-scheduler-on-aws/v3.0.8/91ea4233369ba5516247f4a77ff068de01ce43ba76392b2d54d59ff7fc4ac7fb.zip"
    },
    "Description": "Custom Resource Provider used to generate unique UUIDs for solution deployments",
    "Environment": {
     "Variables": {
      "USER_AGENT_EXTRA": "AwsSolution/SO0030/v3.0.8",
      "UUID_KEY": "/Solutions/instance-scheduler-on-aws/UUID/",
      "STACK_ID": {
       "Ref": "AWS::StackId"
      }
     }
    },
    "Handler": "instance_scheduler.handler.metrics_uuid_custom_resource.handle_metrics_uuid_request",
    "MemorySize": 128,
    "Role": {
     "Fn::GetAtt": [
      "MetricsGeneratorRole83735CC4",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 60,
    "TracingConfig": {
     "Mode": "Active"
    }
   },
   "DependsOn": [
    "MetricsGeneratorRoleDefaultPolicy19F5F29A",
    "MetricsGeneratorRole83735CC4"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W89",
       "reason": "This Lambda function does not need to access any resource provisioned within a VPC."
      },
      {
       "id": "W58",
       "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles."
      },
      {
       "id": "W92",
       "reason": "Lambda function is a custom resource. Concurrent calls are very limited."
      }
     ]
    }
   }
  },
  "MetricsUuidHandlerLogGroupF41CCF90": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "MetricsUuidGenerator172A04DB"
       }
      ]
     ]
    },
    "RetentionInDays": {
     "Ref": "LogRetentionDays"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "This template has to be supported in gov cloud which doesn't yet have the feature to provide kms key id to cloudwatch log group"
      }
     ]
    }
   }
  },
  "MetricsUuidPermissionsPolicyD0672406": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "MetricsUuidHandlerLogGroupF41CCF90",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "ssm:GetParameters",
        "ssm:GetParameter",
        "ssm:GetParameterHistory"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":ssm:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":parameter/Solutions/instance-scheduler-on-aws/UUID/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "MetricsUuidPermissionsPolicyD0672406",
    "Roles": [
     {
      "Ref": "MetricsGeneratorRole83735CC4"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/MetricsUuidPermissionsPolicy/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "backwards compatibility (<=1.5.3) -- ability to read metrics UUID from ssm parameter",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::arn:<AWS::Partition>:ssm:<AWS::Region>:<AWS::AccountId>:parameter/Solutions/instance-scheduler-on-aws/UUID/*"
       ]
      }
     ]
    }
   }
  },
  "MetricsUuidProvider": {
   "Type": "Custom::MetricsUuid",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "MetricsUuidGenerator172A04DB",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "MetricsUuidPermissionsPolicyD0672406"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/MetricsUuidProvider/Default"
   }
  },
  "InstanceSchedulerEncryptionKey": {
   "Type": "AWS::KMS::Key",
   "Properties": {
    "Description": "Key for SNS",
    "EnableKeyRotation": true,
    "Enabled": true,
    "KeyPolicy": {
     "Statement": [
      {
       "Action": "kms:*",
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::Join": [
          "",
          [
           "arn:",
           {
            "Ref": "AWS::Partition"
           },
           ":iam::",
           {
            "Ref": "AWS::AccountId"
           },
           ":root"
          ]
         ]
        }
       },
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "UpdateReplacePolicy": {
    "Fn::If": [
     "ddbDeletionProtectionCondition",
     "Retain",
     "Delete"
    ]
   },
   "DeletionPolicy": {
    "Fn::If": [
     "ddbDeletionProtectionCondition",
     "Retain",
     "Delete"
    ]
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/InstanceSchedulerEncryptionKey/Resource"
   }
  },
  "InstanceSchedulerEncryptionKeyAlias": {
   "Type": "AWS::KMS::Alias",
   "Properties": {
    "AliasName": {
     "Fn::Join": [
      "",
      [
       "alias/",
       {
        "Ref": "AWS::StackName"
       },
       "-instance-scheduler-encryption-key"
      ]
     ]
    },
    "TargetKeyId": {
     "Fn::GetAtt": [
      "InstanceSchedulerEncryptionKey",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/InstanceSchedulerEncryptionKeyAlias/Resource"
   }
  },
  "InstanceSchedulerSnsTopic": {
   "Type": "AWS::SNS::Topic",
   "Properties": {
    "KmsMasterKeyId": {
     "Fn::GetAtt": [
      "InstanceSchedulerEncryptionKey",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/InstanceSchedulerSnsTopic/Resource"
   }
  },
  "SchedulerLogGroup": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::StackName"
       },
       "-logs"
      ]
     ]
    },
    "RetentionInDays": {
     "Ref": "LogRetentionDays"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "CloudWatch log groups only have transactional data from the Lambda function, this template has to be supported in gov cloud which doesn't yet have the feature to provide kms key id to cloudwatch log group."
      }
     ]
    }
   }
  },
  "StateTable": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "service",
      "AttributeType": "S"
     },
     {
      "AttributeName": "account-region",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "DeletionProtectionEnabled": {
     "Fn::If": [
      "ddbDeletionProtectionCondition",
      "True",
      "False"
     ]
    },
    "KeySchema": [
     {
      "AttributeName": "service",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "account-region",
      "KeyType": "RANGE"
     }
    ],
    "PointInTimeRecoverySpecification": {
     "PointInTimeRecoveryEnabled": true
    },
    "SSESpecification": {
     "KMSMasterKeyId": {
      "Fn::GetAtt": [
       "InstanceSchedulerEncryptionKey",
       "Arn"
      ]
     },
     "SSEEnabled": true,
     "SSEType": "KMS"
    }
   },
   "UpdateReplacePolicy": {
    "Fn::If": [
     "ddbDeletionProtectionCondition",
     "Retain",
     "Delete"
    ]
   },
   "DeletionPolicy": {
    "Fn::If": [
     "ddbDeletionProtectionCondition",
     "Retain",
     "Delete"
    ]
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/StateTable/Resource"
   }
  },
  "ConfigTable": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "type",
      "AttributeType": "S"
     },
     {
      "AttributeName": "name",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "DeletionProtectionEnabled": {
     "Fn::If": [
      "ddbDeletionProtectionCondition",
      "True",
      "False"
     ]
    },
    "KeySchema": [
     {
      "AttributeName": "type",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "name",
      "KeyType": "RANGE"
     }
    ],
    "PointInTimeRecoverySpecification": {
     "PointInTimeRecoveryEnabled": true
    },
    "SSESpecification": {
     "KMSMasterKeyId": {
      "Fn::GetAtt": [
       "InstanceSchedulerEncryptionKey",
       "Arn"
      ]
     },
     "SSEEnabled": true,
     "SSEType": "KMS"
    },
    "StreamSpecification": {
     "StreamViewType": "KEYS_ONLY"
    }
   },
   "UpdateReplacePolicy": {
    "Fn::If": [
     "ddbDeletionProtectionCondition",
     "Retain",
     "Delete"
    ]
   },
   "DeletionPolicy": {
    "Fn::If": [
     "ddbDeletionProtectionCondition",
     "Retain",
     "Delete"
    ]
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/ConfigTable/Resource"
   }
  },
  "MaintenanceWindowTable": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "account-region",
      "AttributeType": "S"
     },
     {
      "AttributeName": "name-id",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "DeletionProtectionEnabled": {
     "Fn::If": [
      "ddbDeletionProtectionCondition",
      "True",
      "False"
     ]
    },
    "KeySchema": [
     {
      "AttributeName": "account-region",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "name-id",
      "KeyType": "RANGE"
     }
    ],
    "PointInTimeRecoverySpecification": {
     "PointInTimeRecoveryEnabled": true
    },
    "SSESpecification": {
     "KMSMasterKeyId": {
      "Fn::GetAtt": [
       "InstanceSchedulerEncryptionKey",
       "Arn"
      ]
     },
     "SSEEnabled": true,
     "SSEType": "KMS"
    }
   },
   "UpdateReplacePolicy": {
    "Fn::If": [
     "ddbDeletionProtectionCondition",
     "Retain",
     "Delete"
    ]
   },
   "DeletionPolicy": {
    "Fn::If": [
     "ddbDeletionProtectionCondition",
     "Retain",
     "Delete"
    ]
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/MaintenanceWindowTable/Resource"
   }
  },
  "SpokeRegistrationRole0E2E4D3E": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/SpokeRegistrationRole/Resource"
   }
  },
  "SpokeRegistrationRoleDefaultPolicy7A7A6954": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "xray:PutTraceSegments",
        "xray:PutTelemetryRecords"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "SpokeRegistrationRoleDefaultPolicy7A7A6954",
    "Roles": [
     {
      "Ref": "SpokeRegistrationRole0E2E4D3E"
     }
    ]
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "Wildcard required for xray"
      }
     ]
    },
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "required for xray",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      }
     ]
    }
   }
  },
  "SpokeRegistrationHandler923F17AC": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     "S3Key": "instance-scheduler-on-aws/v3.0.8/91ea4233369ba5516247f4a77ff068de01ce43ba76392b2d54d59ff7fc4ac7fb.zip"
    },
    "Description": "spoke account registration handler, version v3.0.8",
    "Environment": {
     "Variables": {
      "CONFIG_TABLE": {
       "Ref": "ConfigTable"
      },
      "USER_AGENT_EXTRA": "AwsSolution/SO0030/v3.0.8",
      "LOG_GROUP": {
       "Ref": "SchedulerLogGroup"
      },
      "ISSUES_TOPIC_ARN": {
       "Ref": "InstanceSchedulerSnsTopic"
      },
      "ENABLE_DEBUG_LOGS": {
       "Fn::If": [
        "TraceCondition",
        "True",
        "False"
       ]
      }
     }
    },
    "FunctionName": {
     "Fn::Join": [
      "",
      [
       "InstanceScheduler-",
       {
        "Ref": "Namespace"
       },
       "-SpokeRegistration"
      ]
     ]
    },
    "Handler": "instance_scheduler.handler.spoke_registration.handle_spoke_registration_event",
    "MemorySize": 128,
    "Role": {
     "Fn::GetAtt": [
      "SpokeRegistrationRole0E2E4D3E",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 60,
    "TracingConfig": {
     "Mode": "Active"
    }
   },
   "DependsOn": [
    "SpokeRegistrationRoleDefaultPolicy7A7A6954",
    "SpokeRegistrationRole0E2E4D3E"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W89",
       "reason": "This Lambda function does not need to access any resource provisioned within a VPC."
      },
      {
       "id": "W58",
       "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles."
      },
      {
       "id": "W92",
       "reason": "Lambda function is invoke by new account registration/deregistration events and is not likely to have much concurrency"
      },
      {
       "id": "F13",
       "reason": "This lambda scopes invoke permissions to members of the same AWS organization. This is the narrowest possible scope that still allows new spoke accounts to register themselves with the hub after being deployed"
      }
     ]
    }
   }
  },
  "SpokeRegistrationPolicy600671FC": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "logs:CreateLogGroup",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":logs:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":log-group:/aws/lambda/InstanceScheduler-",
          {
           "Ref": "Namespace"
          },
          "-SpokeRegistration:*"
         ]
        ]
       }
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":logs:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":log-group:/aws/lambda/InstanceScheduler-",
          {
           "Ref": "Namespace"
          },
          "-SpokeRegistration:log-stream:*"
         ]
        ]
       }
      },
      {
       "Action": [
        "kms:Decrypt",
        "kms:DescribeKey",
        "kms:Encrypt",
        "kms:ReEncrypt*",
        "kms:GenerateDataKey*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "InstanceSchedulerEncryptionKey",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ConfigTable",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": "sns:Publish",
       "Effect": "Allow",
       "Resource": {
        "Ref": "InstanceSchedulerSnsTopic"
       }
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "SchedulerLogGroup",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "SpokeRegistrationPolicy600671FC",
    "Roles": [
     {
      "Ref": "SpokeRegistrationRole0E2E4D3E"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/SpokeRegistrationPolicy/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Permission to use solution CMK with dynamo/sns",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Action::kms:GenerateDataKey*",
        "Action::kms:ReEncrypt*"
       ]
      },
      {
       "reason": "Wildcard required for creating and writing to log group and stream",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/InstanceScheduler-<Namespace>-SpokeRegistration:*",
        "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/InstanceScheduler-<Namespace>-SpokeRegistration:log-stream:*"
       ]
      }
     ]
    }
   }
  },
  "SpokeRegistrationLambdaCrossAccountPermission": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Ref": "SpokeRegistrationHandler923F17AC"
    },
    "Principal": "*",
    "PrincipalOrgID": {
     "Fn::Select": [
      0,
      {
       "Ref": "Principals"
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/SpokeRegistrationLambdaCrossAccountPermission",
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "F13",
       "reason": "Lambda permission policy requires principal wildcard for spoke accounts to self register by invoking this function.This is acceptable as we are narrowing the authorized accounts to only those contained within the org via principalOrgId"
      }
     ]
    }
   },
   "Condition": "UsingAWSOrganizationsCondition"
  },
  "SpokeDeregistrationRunbookRole0A1D0232": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ssm.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Description": "Role assumed by SSM Automation to call the spoke registration lambda"
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/SpokeDeregistrationRunbookRole/Resource"
   }
  },
  "SpokeDeregistrationRunbookRoleDefaultPolicy208AD52D": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "SpokeRegistrationHandler923F17AC",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "SpokeRegistrationHandler923F17AC",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "SpokeDeregistrationRunbookRoleDefaultPolicy208AD52D",
    "Roles": [
     {
      "Ref": "SpokeDeregistrationRunbookRole0A1D0232"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/SpokeDeregistrationRunbookRole/DefaultPolicy/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "permissions to invoke all versions of the spoke registration lambda",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::<SpokeRegistrationHandler923F17AC.Arn>:*"
       ]
      }
     ]
    }
   }
  },
  "SpokeDeregistrationRunbookFF4A7B49": {
   "Type": "AWS::SSM::Document",
   "Properties": {
    "Content": {
     "description": "Deregister a spoke account from Instance Scheduler on AWS on demand",
     "schemaVersion": "0.3",
     "parameters": {
      "AccountId": {
       "type": "String",
       "description": "Spoke Account ID used for registration",
       "allowedPattern": "^\\d{12}$"
      }
     },
     "assumeRole": {
      "Fn::GetAtt": [
       "SpokeDeregistrationRunbookRole0A1D0232",
       "Arn"
      ]
     },
     "mainSteps": [
      {
       "description": "Invokes the Instance Scheduler on AWS spoke registration lambda to deregister a given AWS Account ID",
       "name": "InvokeSpokeRegistrationLambda",
       "action": "aws:invokeLambdaFunction",
       "inputs": {
        "FunctionName": {
         "Fn::GetAtt": [
          "SpokeRegistrationHandler923F17AC",
          "Arn"
         ]
        },
        "InvocationType": "RequestResponse",
        "InputPayload": {
         "account": "{{ AccountId }}",
         "operation": "Deregister"
        }
       }
      }
     ]
    },
    "DocumentFormat": "YAML",
    "DocumentType": "Automation",
    "Tags": [
     {
      "Key": "CdkGenerated",
      "Value": "true"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/SpokeDeregistrationRunbook/Resource"
   }
  },
  "MainLambdaRole500DC55A": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/MainLambdaRole/Resource"
   }
  },
  "MainLambdaRoleDefaultPolicy5347C905": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "xray:PutTraceSegments",
        "xray:PutTelemetryRecords"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "kms:Decrypt",
        "kms:DescribeKey",
        "kms:Encrypt",
        "kms:ReEncrypt*",
        "kms:GenerateDataKey*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "InstanceSchedulerEncryptionKey",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ConfigTable",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "SchedulerLogGroup",
         "Arn"
        ]
       }
      },
      {
       "Action": "sns:Publish",
       "Effect": "Allow",
       "Resource": {
        "Ref": "InstanceSchedulerSnsTopic"
       }
      },
      {
       "Action": "logs:CreateLogGroup",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":logs:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":*"
         ]
        ]
       }
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:PutRetentionPolicy"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":logs:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":log-group:/aws/lambda/",
          {
           "Ref": "AWS::StackName"
          },
          "-InstanceSchedulerMain:*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "MainLambdaRoleDefaultPolicy5347C905",
    "Roles": [
     {
      "Ref": "MainLambdaRole500DC55A"
     }
    ]
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "Wildcard required for xray"
      },
      {
       "id": "W76",
       "reason": "Acknowledged IAM policy document SPCM > 25"
      }
     ]
    },
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Permission to use solution CMK with dynamo/sns",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Action::kms:GenerateDataKey*",
        "Action::kms:ReEncrypt*"
       ]
      },
      {
       "reason": "required for xray",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      },
      {
       "reason": "Permission to use the solution's custom log group",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:*"
       ]
      },
      {
       "reason": "Permission to modify own log group retention policy",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::arn:<AWS::Partition>:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/<AWS::StackName>-InstanceSchedulerMain:*"
       ]
      }
     ]
    }
   }
  },
  "Main": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     "S3Key": "instance-scheduler-on-aws/v3.0.8/91ea4233369ba5516247f4a77ff068de01ce43ba76392b2d54d59ff7fc4ac7fb.zip"
    },
    "Description": "EC2 and RDS instance scheduler, version v3.0.8",
    "Environment": {
     "Variables": {
      "LOG_GROUP": {
       "Ref": "SchedulerLogGroup"
      },
      "ISSUES_TOPIC_ARN": {
       "Ref": "InstanceSchedulerSnsTopic"
      },
      "TRACE": {
       "Fn::If": [
        "TraceCondition",
        "True",
        "False"
       ]
      },
      "USER_AGENT_EXTRA": "AwsSolution/SO0030/v3.0.8",
      "DEFAULT_TIMEZONE": {
       "Ref": "DefaultTimezone"
      },
      "ENABLE_AWS_ORGANIZATIONS": {
       "Fn::If": [
        "UsingAWSOrganizationsCondition",
        "True",
        "False"
       ]
      },
      "CONFIG_TABLE": {
       "Ref": "ConfigTable"
      },
      "METRICS_URL": "https://metrics.awssolutionsbuilder.com/generic",
      "SEND_METRICS": {
       "Fn::If": [
        "AnonymizedMetricsEnabled",
        "True",
        "False"
       ]
      },
      "SOLUTION_ID": "SO0030",
      "SOLUTION_VERSION": "v3.0.8",
      "SCHEDULING_INTERVAL_MINUTES": {
       "Ref": "SchedulerFrequency"
      },
      "METRICS_UUID": {
       "Fn::GetAtt": [
        "MetricsUuidProvider",
        "Uuid"
       ]
      }
     }
    },
    "FunctionName": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::StackName"
       },
       "-InstanceSchedulerMain"
      ]
     ]
    },
    "Handler": "instance_scheduler.main.lambda_handler",
    "MemorySize": 128,
    "Role": {
     "Fn::GetAtt": [
      "MainLambdaRole500DC55A",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 300,
    "TracingConfig": {
     "Mode": "Active"
    }
   },
   "DependsOn": [
    "MainLambdaRoleDefaultPolicy5347C905",
    "MainLambdaRole500DC55A"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W89",
       "reason": "This Lambda function does not need to access any resource provisioned within a VPC."
      },
      {
       "id": "W58",
       "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles."
      },
      {
       "id": "W92",
       "reason": "Need to investigate appropriate ReservedConcurrentExecutions for this lambda"
      }
     ]
    }
   }
  },
  "SchedulerConfigHelper": {
   "Type": "Custom::ServiceSetup",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "Main",
      "Arn"
     ]
    },
    "timeout": 120,
    "remote_account_ids": {
     "Ref": "Principals"
    },
    "log_retention_days": {
     "Ref": "LogRetentionDays"
    }
   },
   "DependsOn": [
    "SchedulerLogGroup"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/ServiceSetup/Default"
   }
  },
  "schedulingRequestHandlerRoleD87803EB": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "RoleName": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "Namespace"
       },
       "-SchedulingRequestHandler-Role"
      ]
     ]
    }
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W28",
       "reason": "Explicit role name required for assumedBy arn principle in spoke stack"
      }
     ]
    }
   }
  },
  "schedulingRequestHandlerRoleDefaultPolicy938ADC4A": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "xray:PutTraceSegments",
        "xray:PutTelemetryRecords"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "schedulingRequestHandlerRoleDefaultPolicy938ADC4A",
    "Roles": [
     {
      "Ref": "schedulingRequestHandlerRoleD87803EB"
     }
    ]
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "Wildcard required for xray"
      }
     ]
    },
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "required for xray",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      },
      {
       "reason": "ability to call spoke-registration handler",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::<SpokeRegistrationHandler923F17AC.Arn>:*"
       ]
      }
     ]
    }
   }
  },
  "schedulingRequestHandlerLambdaC395DC9E": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     "S3Key": "instance-scheduler-on-aws/v3.0.8/91ea4233369ba5516247f4a77ff068de01ce43ba76392b2d54d59ff7fc4ac7fb.zip"
    },
    "Description": "Handles scheduling requests for Instance Scheduler on AWS, version v3.0.8",
    "Environment": {
     "Variables": {
      "CONFIG_TABLE": {
       "Ref": "ConfigTable"
      },
      "STATE_TABLE": {
       "Ref": "StateTable"
      },
      "MAINT_WINDOW_TABLE": {
       "Ref": "MaintenanceWindowTable"
      },
      "USER_AGENT_EXTRA": "AwsSolution/SO0030/v3.0.8",
      "STACK_NAME": {
       "Ref": "AWS::StackName"
      },
      "LOG_GROUP": {
       "Ref": "SchedulerLogGroup"
      },
      "ISSUES_TOPIC_ARN": {
       "Ref": "InstanceSchedulerSnsTopic"
      },
      "ENABLE_DEBUG_LOGS": {
       "Fn::If": [
        "TraceCondition",
        "True",
        "False"
       ]
      },
      "SCHEDULER_ROLE_NAME": {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "Namespace"
         },
         "-Scheduler-Role"
        ]
       ]
      },
      "DEFAULT_TIMEZONE": {
       "Ref": "DefaultTimezone"
      },
      "START_TAGS": {
       "Ref": "StartedTags"
      },
      "STOP_TAGS": {
       "Ref": "StoppedTags"
      },
      "SCHEDULE_TAG_KEY": {
       "Ref": "TagName"
      },
      "ENABLE_EC2_SSM_MAINTENANCE_WINDOWS": {
       "Fn::If": [
        "EnableSSMMaintenanceWindowsCondition",
        "True",
        "False"
       ]
      },
      "ENABLE_RDS_SERVICE": {
       "Fn::If": [
        "ScheduleRdsCondition",
        "True",
        "False"
       ]
      },
      "ENABLE_RDS_CLUSTERS": {
       "Fn::If": [
        "EnableRdsClusterSchedulingCondition",
        "True",
        "False"
       ]
      },
      "ENABLE_NEPTUNE_SERVICE": {
       "Fn::If": [
        "ScheduleNeptuneCondition",
        "True",
        "False"
       ]
      },
      "ENABLE_DOCDB_SERVICE": {
       "Fn::If": [
        "ScheduleDocDbCondition",
        "True",
        "False"
       ]
      },
      "ENABLE_RDS_SNAPSHOTS": {
       "Fn::If": [
        "CreateRdsSnapshotCondition",
        "True",
        "False"
       ]
      },
      "ENABLE_OPS_MONITORING": {
       "Fn::If": [
        "OpsMonitoringCondition",
        "True",
        "False"
       ]
      },
      "METRICS_URL": "https://metrics.awssolutionsbuilder.com/generic",
      "SEND_METRICS": {
       "Fn::If": [
        "AnonymizedMetricsEnabled",
        "True",
        "False"
       ]
      },
      "SOLUTION_ID": "SO0030",
      "SOLUTION_VERSION": "v3.0.8",
      "SCHEDULING_INTERVAL_MINUTES": {
       "Ref": "SchedulerFrequency"
      },
      "METRICS_UUID": {
       "Fn::GetAtt": [
        "MetricsUuidProvider",
        "Uuid"
       ]
      }
     }
    },
    "Handler": "instance_scheduler.handler.scheduling_request.handle_scheduling_request",
    "MemorySize": {
     "Ref": "MemorySize"
    },
    "Role": {
     "Fn::GetAtt": [
      "schedulingRequestHandlerRoleD87803EB",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 300,
    "TracingConfig": {
     "Mode": "Active"
    }
   },
   "DependsOn": [
    "schedulingRequestHandlerRoleDefaultPolicy938ADC4A",
    "schedulingRequestHandlerRoleD87803EB"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W89",
       "reason": "This Lambda function does not need to access any resource provisioned within a VPC."
      },
      {
       "id": "W58",
       "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles."
      },
      {
       "id": "W92",
       "reason": "Need to investigate appropriate ReservedConcurrentExecutions for this lambda"
      }
     ]
    }
   }
  },
  "schedulingRequestHandlerLogGroup92A14530": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "schedulingRequestHandlerLambdaC395DC9E"
       }
      ]
     ]
    },
    "RetentionInDays": {
     "Ref": "LogRetentionDays"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "This template has to be supported in gov cloud which doesn't yet have the feature to provide kms key id to cloudwatch log group"
      }
     ]
    }
   }
  },
  "schedulingRequestHandlerPolicy1BE05FC4": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "schedulingRequestHandlerLogGroup92A14530",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "kms:Decrypt",
        "kms:DescribeKey"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "InstanceSchedulerEncryptionKey",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ConfigTable",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": [
        "kms:Decrypt",
        "kms:DescribeKey",
        "kms:Encrypt",
        "kms:ReEncrypt*",
        "kms:GenerateDataKey*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "InstanceSchedulerEncryptionKey",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "StateTable",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:PutItem",
        "dynamodb:UpdateItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "MaintenanceWindowTable",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": "sns:Publish",
       "Effect": "Allow",
       "Resource": {
        "Ref": "InstanceSchedulerSnsTopic"
       }
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "SchedulerLogGroup",
         "Arn"
        ]
       }
      },
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":iam::*:role/",
          {
           "Ref": "Namespace"
          },
          "-Scheduler-Role"
         ]
        ]
       }
      },
      {
       "Action": "cloudwatch:PutMetricData",
       "Condition": {
        "StringEquals": {
         "cloudwatch:namespace": {
          "Fn::Join": [
           "",
           [
            {
             "Ref": "AWS::StackName"
            },
            ":InstanceScheduler"
           ]
          ]
         }
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "schedulingRequestHandlerPolicy1BE05FC4",
    "Roles": [
     {
      "Ref": "schedulingRequestHandlerRoleD87803EB"
     }
    ]
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "cloudwatch:PutMetricData action requires wildcard"
      },
      {
       "id": "W76",
       "reason": "Acknowledged IAM policy document SPCM > 25"
      }
     ]
    },
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Permission to use solution CMK with dynamo/sns",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Action::kms:GenerateDataKey*",
        "Action::kms:ReEncrypt*"
       ]
      },
      {
       "reason": "This handler's primary purpose is to assume role into spoke accounts for scheduling purposes",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::arn:<AWS::Partition>:iam::*:role/<Namespace>-Scheduler-Role"
       ]
      },
      {
       "reason": "Ability to publish custom metrics to cloudwatch",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      }
     ]
    }
   }
  },
  "SchedulingOrchestratorRoleAD0FF7B1": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/SchedulingOrchestratorRole/Resource"
   }
  },
  "SchedulingOrchestratorRoleDefaultPolicy29DE8B0D": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "xray:PutTraceSegments",
        "xray:PutTelemetryRecords"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "schedulingRequestHandlerLambdaC395DC9E",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "schedulingRequestHandlerLambdaC395DC9E",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "SchedulingOrchestratorRoleDefaultPolicy29DE8B0D",
    "Roles": [
     {
      "Ref": "SchedulingOrchestratorRoleAD0FF7B1"
     }
    ]
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "Wildcard required for xray"
      }
     ]
    },
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "required for xray",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      },
      {
       "reason": "permission to invoke request handler lambda",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::<schedulingRequestHandlerLambdaC395DC9E.Arn>:*"
       ]
      }
     ]
    }
   }
  },
  "SchedulingOrchestratorBB4C4C5A": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     "S3Key": "instance-scheduler-on-aws/v3.0.8/91ea4233369ba5516247f4a77ff068de01ce43ba76392b2d54d59ff7fc4ac7fb.zip"
    },
    "Description": "scheduling orchestrator for Instance Scheduler on AWS, version v3.0.8",
    "Environment": {
     "Variables": {
      "USER_AGENT_EXTRA": "AwsSolution/SO0030/v3.0.8",
      "LOG_GROUP": {
       "Ref": "SchedulerLogGroup"
      },
      "ISSUES_TOPIC_ARN": {
       "Ref": "InstanceSchedulerSnsTopic"
      },
      "ENABLE_DEBUG_LOGS": {
       "Fn::If": [
        "TraceCondition",
        "True",
        "False"
       ]
      },
      "CONFIG_TABLE": {
       "Ref": "ConfigTable"
      },
      "SCHEDULING_REQUEST_HANDLER_NAME": {
       "Ref": "schedulingRequestHandlerLambdaC395DC9E"
      },
      "ENABLE_SCHEDULE_HUB_ACCOUNT": {
       "Fn::If": [
        "ScheduleLambdaAccountCondition",
        "True",
        "False"
       ]
      },
      "ENABLE_EC2_SERVICE": {
       "Fn::If": [
        "ScheduleEC2Condition",
        "True",
        "False"
       ]
      },
      "ENABLE_RDS_SERVICE": {
       "Fn::If": [
        "ScheduleRdsCondition",
        "True",
        "False"
       ]
      },
      "ENABLE_RDS_CLUSTERS": {
       "Fn::If": [
        "EnableRdsClusterSchedulingCondition",
        "True",
        "False"
       ]
      },
      "ENABLE_NEPTUNE_SERVICE": {
       "Fn::If": [
        "ScheduleNeptuneCondition",
        "True",
        "False"
       ]
      },
      "ENABLE_DOCDB_SERVICE": {
       "Fn::If": [
        "ScheduleDocDbCondition",
        "True",
        "False"
       ]
      },
      "ENABLE_ASG_SERVICE": {
       "Fn::If": [
        "ScheduleASGsCondition",
        "True",
        "False"
       ]
      },
      "SCHEDULE_REGIONS": {
       "Fn::Join": [
        ",",
        {
         "Ref": "Regions"
        }
       ]
      },
      "DEFAULT_TIMEZONE": {
       "Ref": "DefaultTimezone"
      },
      "ENABLE_RDS_SNAPSHOTS": {
       "Fn::If": [
        "CreateRdsSnapshotCondition",
        "True",
        "False"
       ]
      },
      "ENABLE_AWS_ORGANIZATIONS": {
       "Fn::If": [
        "UsingAWSOrganizationsCondition",
        "True",
        "False"
       ]
      },
      "ENABLE_EC2_SSM_MAINTENANCE_WINDOWS": {
       "Fn::If": [
        "EnableSSMMaintenanceWindowsCondition",
        "True",
        "False"
       ]
      },
      "OPS_DASHBOARD_ENABLED": {
       "Fn::If": [
        "OpsMonitoringCondition",
        "True",
        "False"
       ]
      },
      "START_TAGS": {
       "Ref": "StartedTags"
      },
      "STOP_TAGS": {
       "Ref": "StoppedTags"
      },
      "METRICS_URL": "https://metrics.awssolutionsbuilder.com/generic",
      "SEND_METRICS": {
       "Fn::If": [
        "AnonymizedMetricsEnabled",
        "True",
        "False"
       ]
      },
      "SOLUTION_ID": "SO0030",
      "SOLUTION_VERSION": "v3.0.8",
      "SCHEDULING_INTERVAL_MINUTES": {
       "Ref": "SchedulerFrequency"
      },
      "METRICS_UUID": {
       "Fn::GetAtt": [
        "MetricsUuidProvider",
        "Uuid"
       ]
      }
     }
    },
    "Handler": "instance_scheduler.handler.scheduling_orchestrator.handle_orchestration_request",
    "MemorySize": {
     "Ref": "OrchestratorMemorySize"
    },
    "Role": {
     "Fn::GetAtt": [
      "SchedulingOrchestratorRoleAD0FF7B1",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 300,
    "TracingConfig": {
     "Mode": "Active"
    }
   },
   "DependsOn": [
    "SchedulingOrchestratorRoleDefaultPolicy29DE8B0D",
    "SchedulingOrchestratorRoleAD0FF7B1"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W89",
       "reason": "This Lambda function does not need to access any resource provisioned within a VPC."
      },
      {
       "id": "W58",
       "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles."
      },
      {
       "id": "W92",
       "reason": "Lambda function is invoked by a scheduled rule, it does not run concurrently"
      }
     ]
    }
   }
  },
  "SchedulingOrchestratorLogGroup24735009": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "SchedulingOrchestratorBB4C4C5A"
       }
      ]
     ]
    },
    "RetentionInDays": {
     "Ref": "LogRetentionDays"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "This template has to be supported in gov cloud which doesn't yet have the feature to provide kms key id to cloudwatch log group"
      }
     ]
    }
   }
  },
  "SchedulingOrchestratorPermissionsPolicyC2148A26": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "SchedulingOrchestratorLogGroup24735009",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "kms:Decrypt",
        "kms:DescribeKey"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "InstanceSchedulerEncryptionKey",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ConfigTable",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": "sns:Publish",
       "Effect": "Allow",
       "Resource": {
        "Ref": "InstanceSchedulerSnsTopic"
       }
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "SchedulerLogGroup",
         "Arn"
        ]
       }
      },
      {
       "Action": "ssm:DescribeParameters",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "kms:Decrypt",
        "kms:GenerateDataKey*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "InstanceSchedulerEncryptionKey",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "ssm:GetParameter",
        "ssm:GetParameters"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":ssm:*:",
          {
           "Ref": "AWS::AccountId"
          },
          ":parameter/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "SchedulingOrchestratorPermissionsPolicyC2148A26",
    "Roles": [
     {
      "Ref": "SchedulingOrchestratorRoleAD0FF7B1"
     }
    ]
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "Wildcard required for ssm:DescribeParameters"
      },
      {
       "id": "W76",
       "reason": "Acknowledged IAM policy document SPCM > 25"
      }
     ]
    },
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Permission to use solution CMK with dynamo/sns",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Action::kms:GenerateDataKey*",
        "Action::kms:ReEncrypt*"
       ]
      },
      {
       "reason": "Orchestrator requires access to SSM parameters for translating {param: my-param} values to configured account ids",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::arn:<AWS::Partition>:ssm:*:<AWS::AccountId>:parameter/*",
        "Resource::*"
       ]
      }
     ]
    }
   }
  },
  "ASGRole21C54AF6": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "RoleName": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "Namespace"
       },
       "-AsgRequestHandler-Role"
      ]
     ]
    }
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W28",
       "reason": "Explicit role name required for assumedBy arn principle in spoke stack"
      }
     ]
    }
   }
  },
  "ASGRoleDefaultPolicy0DBFE29F": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "xray:PutTraceSegments",
        "xray:PutTelemetryRecords"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ASGRoleDefaultPolicy0DBFE29F",
    "Roles": [
     {
      "Ref": "ASGRole21C54AF6"
     }
    ]
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "Wildcard required for xray"
      }
     ]
    },
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "required for xray",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      }
     ]
    }
   }
  },
  "ASGHandler0F6D6751": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     "S3Key": "instance-scheduler-on-aws/v3.0.8/91ea4233369ba5516247f4a77ff068de01ce43ba76392b2d54d59ff7fc4ac7fb.zip"
    },
    "Description": "Instance Scheduler for AutoScaling Groups version v3.0.8",
    "Environment": {
     "Variables": {
      "CONFIG_TABLE": {
       "Ref": "ConfigTable"
      },
      "USER_AGENT_EXTRA": "AwsSolution/SO0030/v3.0.8",
      "ISSUES_TOPIC_ARN": {
       "Ref": "InstanceSchedulerSnsTopic"
      },
      "POWERTOOLS_LOG_LEVEL": {
       "Fn::If": [
        "TraceCondition",
        "DEBUG",
        "INFO"
       ]
      },
      "POWERTOOLS_SERVICE_NAME": "asg",
      "ASG_SCHEDULING_ROLE_NAME": {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "Namespace"
         },
         "-ASG-Scheduling-Role"
        ]
       ]
      },
      "DEFAULT_TIMEZONE": {
       "Ref": "DefaultTimezone"
      },
      "SCHEDULE_TAG_KEY": {
       "Ref": "TagName"
      },
      "SCHEDULED_TAG_KEY": {
       "Ref": "AsgScheduledTagKey"
      },
      "RULE_PREFIX": {
       "Ref": "AsgRulePrefix"
      },
      "METRICS_URL": "https://metrics.awssolutionsbuilder.com/generic",
      "SEND_METRICS": {
       "Fn::If": [
        "AnonymizedMetricsEnabled",
        "True",
        "False"
       ]
      },
      "SOLUTION_ID": "SO0030",
      "SOLUTION_VERSION": "v3.0.8",
      "SCHEDULING_INTERVAL_MINUTES": {
       "Ref": "SchedulerFrequency"
      },
      "METRICS_UUID": {
       "Fn::GetAtt": [
        "MetricsUuidProvider",
        "Uuid"
       ]
      }
     }
    },
    "Handler": "instance_scheduler.handler.asg.lambda_handler",
    "MemorySize": {
     "Ref": "AsgMemorySize"
    },
    "Role": {
     "Fn::GetAtt": [
      "ASGRole21C54AF6",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 300,
    "TracingConfig": {
     "Mode": "Active"
    }
   },
   "DependsOn": [
    "ASGRoleDefaultPolicy0DBFE29F",
    "ASGRole21C54AF6"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W89",
       "reason": "This Lambda function does not need to access any resource provisioned within a VPC."
      },
      {
       "id": "W58",
       "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles."
      },
      {
       "id": "W92",
       "reason": "Need to investigate appropriate ReservedConcurrentExecutions for this lambda"
      }
     ]
    }
   }
  },
  "ASGHandlerLogGroupA8EE11F3": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "ASGHandler0F6D6751"
       }
      ]
     ]
    },
    "RetentionInDays": {
     "Ref": "LogRetentionDays"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "This template has to be supported in gov cloud which doesn't yet have the feature to provide kms key id to cloudwatch log group"
      }
     ]
    }
   }
  },
  "ASGPolicy3B6FAA4E": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ASGHandlerLogGroupA8EE11F3",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "kms:Decrypt",
        "kms:DescribeKey"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "InstanceSchedulerEncryptionKey",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ConfigTable",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": "sns:Publish",
       "Effect": "Allow",
       "Resource": {
        "Ref": "InstanceSchedulerSnsTopic"
       }
      },
      {
       "Action": [
        "kms:Decrypt",
        "kms:Encrypt",
        "kms:ReEncrypt*",
        "kms:GenerateDataKey*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "InstanceSchedulerEncryptionKey",
         "Arn"
        ]
       }
      },
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":iam::*:role/",
          {
           "Ref": "Namespace"
          },
          "-ASG-Scheduling-Role"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ASGPolicy3B6FAA4E",
    "Roles": [
     {
      "Ref": "ASGRole21C54AF6"
     }
    ]
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W76",
       "reason": "Acknowledged IAM policy document SPCM > 25"
      }
     ]
    },
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Permission to use solution CMK with dynamo/sns",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Action::kms:GenerateDataKey*",
        "Action::kms:ReEncrypt*"
       ]
      },
      {
       "reason": "This handler's primary purpose is to assume role into spoke accounts for scheduling purposes",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::arn:<AWS::Partition>:iam::*:role/<Namespace>-ASG-Scheduling-Role"
       ]
      }
     ]
    }
   }
  },
  "ASGSchedulerASGOrchRole5B79F32B": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/ASGScheduler/ASGOrchRole/Resource"
   },
   "Condition": "ScheduleASGsCondition"
  },
  "ASGSchedulerASGOrchRoleDefaultPolicy55DE89B0": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "xray:PutTraceSegments",
        "xray:PutTelemetryRecords"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ASGHandler0F6D6751",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ASGHandler0F6D6751",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ASGSchedulerASGOrchRoleDefaultPolicy55DE89B0",
    "Roles": [
     {
      "Ref": "ASGSchedulerASGOrchRole5B79F32B"
     }
    ]
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "Wildcard required for xray"
      }
     ]
    },
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "required for xray",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      },
      {
       "reason": "permissions to invoke all versions of the ASG scheduling request handler",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::<ASGHandler0F6D6751.Arn>:*"
       ]
      }
     ]
    }
   },
   "Condition": "ScheduleASGsCondition"
  },
  "ASGSchedulerASGOrchestrator6629B72C": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     "S3Key": "instance-scheduler-on-aws/v3.0.8/91ea4233369ba5516247f4a77ff068de01ce43ba76392b2d54d59ff7fc4ac7fb.zip"
    },
    "Description": "Instance Scheduler orchestrator for AutoScaling Groups version v3.0.8",
    "Environment": {
     "Variables": {
      "USER_AGENT_EXTRA": "AwsSolution/SO0030/v3.0.8",
      "CONFIG_TABLE": {
       "Ref": "ConfigTable"
      },
      "ISSUES_TOPIC_ARN": {
       "Ref": "InstanceSchedulerSnsTopic"
      },
      "ENABLE_SCHEDULE_HUB_ACCOUNT": {
       "Fn::If": [
        "ScheduleLambdaAccountCondition",
        "True",
        "False"
       ]
      },
      "SCHEDULE_REGIONS": {
       "Fn::Join": [
        ",",
        {
         "Ref": "Regions"
        }
       ]
      },
      "ASG_SCHEDULER_NAME": {
       "Ref": "ASGHandler0F6D6751"
      },
      "POWERTOOLS_LOG_LEVEL": {
       "Fn::If": [
        "TraceCondition",
        "DEBUG",
        "INFO"
       ]
      },
      "POWERTOOLS_SERVICE_NAME": "asg_orch",
      "METRICS_URL": "https://metrics.awssolutionsbuilder.com/generic",
      "SEND_METRICS": {
       "Fn::If": [
        "AnonymizedMetricsEnabled",
        "True",
        "False"
       ]
      },
      "SOLUTION_ID": "SO0030",
      "SOLUTION_VERSION": "v3.0.8",
      "SCHEDULING_INTERVAL_MINUTES": {
       "Ref": "SchedulerFrequency"
      },
      "METRICS_UUID": {
       "Fn::GetAtt": [
        "MetricsUuidProvider",
        "Uuid"
       ]
      }
     }
    },
    "Handler": "instance_scheduler.handler.asg_orchestrator.lambda_handler",
    "MemorySize": {
     "Ref": "OrchestratorMemorySize"
    },
    "Role": {
     "Fn::GetAtt": [
      "ASGSchedulerASGOrchRole5B79F32B",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 60,
    "TracingConfig": {
     "Mode": "Active"
    }
   },
   "DependsOn": [
    "ASGSchedulerASGOrchRoleDefaultPolicy55DE89B0",
    "ASGSchedulerASGOrchRole5B79F32B"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W89",
       "reason": "This Lambda function does not need to access any resource provisioned within a VPC."
      },
      {
       "id": "W58",
       "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles."
      },
      {
       "id": "W92",
       "reason": "Need to investigate appropriate ReservedConcurrentExecutions for this lambda"
      }
     ]
    }
   },
   "Condition": "ScheduleASGsCondition"
  },
  "ASGSchedulerASGOrchLogGroup58E06A86": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "ASGSchedulerASGOrchestrator6629B72C"
       }
      ]
     ]
    },
    "RetentionInDays": {
     "Ref": "LogRetentionDays"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "This template has to be supported in gov cloud which doesn't yet have the feature to provide kms key id to cloudwatch log group"
      }
     ]
    }
   },
   "Condition": "ScheduleASGsCondition"
  },
  "ASGSchedulerASGOrchPolicyB5F2EC10": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ASGSchedulerASGOrchLogGroup58E06A86",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "kms:Decrypt",
        "kms:DescribeKey"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "InstanceSchedulerEncryptionKey",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ConfigTable",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": "sns:Publish",
       "Effect": "Allow",
       "Resource": {
        "Ref": "InstanceSchedulerSnsTopic"
       }
      },
      {
       "Action": [
        "kms:Decrypt",
        "kms:Encrypt",
        "kms:ReEncrypt*",
        "kms:GenerateDataKey*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "InstanceSchedulerEncryptionKey",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ASGSchedulerASGOrchPolicyB5F2EC10",
    "Roles": [
     {
      "Ref": "ASGSchedulerASGOrchRole5B79F32B"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/ASGScheduler/ASGOrchPolicy/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Permission to use solution CMK with dynamo/sns",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Action::kms:GenerateDataKey*",
        "Action::kms:ReEncrypt*"
       ]
      }
     ]
    }
   },
   "Condition": "ScheduleASGsCondition"
  },
  "ASGSchedulerScheduleUpdateHandlerRole25C919AA": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/ASGScheduler/ScheduleUpdateHandlerRole/Resource"
   },
   "Condition": "ScheduleASGsCondition"
  },
  "ASGSchedulerScheduleUpdateHandlerRoleDefaultPolicy073EAF80": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "xray:PutTraceSegments",
        "xray:PutTelemetryRecords"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "dynamodb:ListStreams",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "kms:Decrypt",
        "kms:DescribeKey"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "InstanceSchedulerEncryptionKey",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "dynamodb:DescribeStream",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ConfigTable",
         "StreamArn"
        ]
       }
      },
      {
       "Action": "lambda:InvokeFunction",
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ASGHandler0F6D6751",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ASGHandler0F6D6751",
             "Arn"
            ]
           },
           ":*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ASGSchedulerScheduleUpdateHandlerRoleDefaultPolicy073EAF80",
    "Roles": [
     {
      "Ref": "ASGSchedulerScheduleUpdateHandlerRole25C919AA"
     }
    ]
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "Wildcard required for xray"
      }
     ]
    },
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "required for xray",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      },
      {
       "reason": "permissions to invoke all versions of the ASG scheduling request handler",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::<ASGHandler0F6D6751.Arn>:*"
       ]
      }
     ]
    }
   },
   "Condition": "ScheduleASGsCondition"
  },
  "ASGSchedulerScheduleUpdateHandlerCC8A8D00": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "solutions-${AWS::Region}"
     },
     "S3Key": "instance-scheduler-on-aws/v3.0.8/91ea4233369ba5516247f4a77ff068de01ce43ba76392b2d54d59ff7fc4ac7fb.zip"
    },
    "Description": "Instance Scheduler handler for updates to schedules version v3.0.8",
    "Environment": {
     "Variables": {
      "USER_AGENT_EXTRA": "AwsSolution/SO0030/v3.0.8",
      "CONFIG_TABLE": {
       "Ref": "ConfigTable"
      },
      "ISSUES_TOPIC_ARN": {
       "Ref": "InstanceSchedulerSnsTopic"
      },
      "ENABLE_SCHEDULE_HUB_ACCOUNT": {
       "Fn::If": [
        "ScheduleLambdaAccountCondition",
        "True",
        "False"
       ]
      },
      "SCHEDULE_REGIONS": {
       "Fn::Join": [
        ",",
        {
         "Ref": "Regions"
        }
       ]
      },
      "ASG_SCHEDULER_NAME": {
       "Ref": "ASGHandler0F6D6751"
      },
      "POWERTOOLS_LOG_LEVEL": {
       "Fn::If": [
        "TraceCondition",
        "DEBUG",
        "INFO"
       ]
      },
      "POWERTOOLS_SERVICE_NAME": "sch_upd",
      "METRICS_URL": "https://metrics.awssolutionsbuilder.com/generic",
      "SEND_METRICS": {
       "Fn::If": [
        "AnonymizedMetricsEnabled",
        "True",
        "False"
       ]
      },
      "SOLUTION_ID": "SO0030",
      "SOLUTION_VERSION": "v3.0.8",
      "SCHEDULING_INTERVAL_MINUTES": {
       "Ref": "SchedulerFrequency"
      },
      "METRICS_UUID": {
       "Fn::GetAtt": [
        "MetricsUuidProvider",
        "Uuid"
       ]
      }
     }
    },
    "Handler": "instance_scheduler.handler.schedule_update.lambda_handler",
    "MemorySize": {
     "Ref": "OrchestratorMemorySize"
    },
    "Role": {
     "Fn::GetAtt": [
      "ASGSchedulerScheduleUpdateHandlerRole25C919AA",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 60,
    "TracingConfig": {
     "Mode": "Active"
    }
   },
   "DependsOn": [
    "ASGSchedulerScheduleUpdateHandlerRoleDefaultPolicy073EAF80",
    "ASGSchedulerScheduleUpdateHandlerRole25C919AA"
   ],
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W89",
       "reason": "This Lambda function does not need to access any resource provisioned within a VPC."
      },
      {
       "id": "W58",
       "reason": "This Lambda function has permission provided to write to CloudWatch logs using the iam roles."
      },
      {
       "id": "W92",
       "reason": "Need to investigate appropriate ReservedConcurrentExecutions for this lambda"
      }
     ]
    }
   },
   "Condition": "ScheduleASGsCondition"
  },
  "ASGSchedulerScheduleUpdateHandlerDynamoDBEventSourceinstancescheduleronawsConfigTableF5DC8AC47898FC2D": {
   "Type": "AWS::Lambda::EventSourceMapping",
   "Properties": {
    "BatchSize": 100,
    "EventSourceArn": {
     "Fn::GetAtt": [
      "ConfigTable",
      "StreamArn"
     ]
    },
    "FilterCriteria": {
     "Filters": [
      {
       "Pattern": "{\"dynamodb\":{\"Keys\":{\"type\":{\"S\":[\"schedule\",\"period\"]}}}}"
      },
      {
       "Pattern": "{\"eventName\":[\"INSERT\",\"MODIFY\"]}"
      }
     ]
    },
    "FunctionName": {
     "Ref": "ASGSchedulerScheduleUpdateHandlerCC8A8D00"
    },
    "MaximumBatchingWindowInSeconds": 60,
    "StartingPosition": "LATEST"
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/ASGScheduler/ScheduleUpdateHandler/DynamoDBEventSource:instancescheduleronawsConfigTableF5DC8AC4/Resource"
   },
   "Condition": "ScheduleASGsCondition"
  },
  "ASGSchedulerScheduleUpdateHandlerLogGroupA3E7612D": {
   "Type": "AWS::Logs::LogGroup",
   "Properties": {
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "ASGSchedulerScheduleUpdateHandlerCC8A8D00"
       }
      ]
     ]
    },
    "RetentionInDays": {
     "Ref": "LogRetentionDays"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W84",
       "reason": "This template has to be supported in gov cloud which doesn't yet have the feature to provide kms key id to cloudwatch log group"
      }
     ]
    }
   },
   "Condition": "ScheduleASGsCondition"
  },
  "ASGSchedulerScheduleUpdateHandlerPolicy81C87FA2": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ASGSchedulerScheduleUpdateHandlerLogGroupA3E7612D",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "kms:Decrypt",
        "kms:DescribeKey"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "InstanceSchedulerEncryptionKey",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:GetItem",
        "dynamodb:Scan",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DescribeTable"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ConfigTable",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      },
      {
       "Action": "sns:Publish",
       "Effect": "Allow",
       "Resource": {
        "Ref": "InstanceSchedulerSnsTopic"
       }
      },
      {
       "Action": [
        "kms:Decrypt",
        "kms:Encrypt",
        "kms:ReEncrypt*",
        "kms:GenerateDataKey*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "InstanceSchedulerEncryptionKey",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ASGSchedulerScheduleUpdateHandlerPolicy81C87FA2",
    "Roles": [
     {
      "Ref": "ASGSchedulerScheduleUpdateHandlerRole25C919AA"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/ASGScheduler/ScheduleUpdateHandlerPolicy/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Permission to use solution CMK with dynamo/sns",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Action::kms:GenerateDataKey*",
        "Action::kms:ReEncrypt*"
       ]
      }
     ]
    }
   },
   "Condition": "ScheduleASGsCondition"
  },
  "ASGSchedulerASGOrchRule510DB4D0": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": "Instance Scheduler - Rule to trigger scheduling for AutoScaling Groups version v3.0.8",
    "ScheduleExpression": "rate(1 hour)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "ASGSchedulerASGOrchestrator6629B72C",
        "Arn"
       ]
      },
      "Id": "Target0",
      "Input": "{}",
      "RetryPolicy": {
       "MaximumRetryAttempts": 5
      }
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/ASGScheduler/ASGOrchRule/Resource"
   },
   "Condition": "ScheduleASGsCondition"
  },
  "ASGSchedulerASGOrchRuleAllowEventRuleinstancescheduleronawsASGSchedulerASGOrchestrator1B2206B5A1E4BBE9": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ASGSchedulerASGOrchestrator6629B72C",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "ASGSchedulerASGOrchRule510DB4D0",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/ASGScheduler/ASGOrchRule/AllowEventRuleinstancescheduleronawsASGSchedulerASGOrchestrator1B2206B5"
   },
   "Condition": "ScheduleASGsCondition"
  },
  "ASGSchedulerAsgSchedulingRoleC184E725": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "ASGRole21C54AF6",
          "Arn"
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "RoleName": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "Namespace"
       },
       "-ASG-Scheduling-Role"
      ]
     ]
    }
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W28",
       "reason": "The role name is defined to allow cross account access from the hub account."
      }
     ]
    }
   },
   "Condition": "ScheduleASGsCondition"
  },
  "ASGSchedulerAsgSchedulingRoleASGSchedulingPermissions9522C2B1": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "autoscaling:BatchPutScheduledUpdateGroupAction",
        "autoscaling:BatchDeleteScheduledAction",
        "autoscaling:CreateOrUpdateTags"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":autoscaling:*:",
          {
           "Ref": "AWS::AccountId"
          },
          ":autoScalingGroup:*:autoScalingGroupName/*"
         ]
        ]
       }
      },
      {
       "Action": [
        "autoscaling:DescribeAutoScalingGroups",
        "autoscaling:DescribeScheduledActions"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ASGSchedulerAsgSchedulingRoleASGSchedulingPermissions9522C2B1",
    "Roles": [
     {
      "Ref": "ASGSchedulerAsgSchedulingRoleC184E725"
     }
    ]
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "DescribeAutoScalingGroups and autoscaling:DescribeScheduledActions actions require wildcard permissions"
      }
     ]
    },
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Required permissions to describe AutoScaling Groups",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      },
      {
       "reason": "Required permissions to modify scheduled scaling actions on AutoScaling Groups",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::arn:<AWS::Partition>:autoscaling:*:<AWS::AccountId>:autoScalingGroup:*:autoScalingGroupName/*"
       ]
      }
     ]
    }
   },
   "Condition": "ScheduleASGsCondition"
  },
  "SchedulerEventRuleDD9A6B32": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "Description": "Instance Scheduler - Rule to trigger instance for scheduler function version v3.0.8",
    "ScheduleExpression": {
     "Fn::FindInMap": [
      "CronExpressionsForSchedulingIntervals",
      "IntervalMinutesToCron",
      {
       "Ref": "SchedulerFrequency"
      }
     ]
    },
    "State": {
     "Fn::If": [
      "SchedulingActiveCondition",
      "ENABLED",
      "DISABLED"
     ]
    },
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "SchedulingOrchestratorBB4C4C5A",
        "Arn"
       ]
      },
      "Id": "Target0",
      "Input": "{\"scheduled_action\":\"run_orchestrator\"}",
      "RetryPolicy": {
       "MaximumRetryAttempts": 5
      }
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/SchedulerEventRule/Resource"
   }
  },
  "SchedulerEventRuleAllowEventRuleinstancescheduleronawsSchedulingOrchestratorCD54E6718835D1AC": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "SchedulingOrchestratorBB4C4C5A",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "SchedulerEventRuleDD9A6B32",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/SchedulerEventRule/AllowEventRuleinstancescheduleronawsSchedulingOrchestratorCD54E671"
   }
  },
  "SchedulerRole59E73443": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "schedulingRequestHandlerRoleD87803EB",
          "Arn"
         ]
        }
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "RoleName": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "Namespace"
       },
       "-Scheduler-Role"
      ]
     ]
    }
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W28",
       "reason": "The role name is defined to allow cross account access from the hub account."
      }
     ]
    }
   }
  },
  "SchedulerRoleSchedulingPermissions2C1B256A": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "ec2:DescribeInstances",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ec2:StartInstances",
        "ec2:StopInstances",
        "ec2:CreateTags",
        "ec2:DeleteTags",
        "ec2:ModifyInstanceAttribute"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Sub": "arn:${AWS::Partition}:ec2:*:${AWS::AccountId}:instance/*"
       }
      },
      {
       "Action": "ssm:DescribeMaintenanceWindows",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "rds:DescribeDBClusters",
        "rds:DescribeDBInstances",
        "tag:GetResources"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "rds:DeleteDBSnapshot",
        "rds:DescribeDBSnapshots",
        "rds:StopDBInstance",
        "rds:CreateDBSnapshot",
        "rds:AddTagsToResource"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Sub": "arn:${AWS::Partition}:rds:*:${AWS::AccountId}:snapshot:*"
       }
      },
      {
       "Action": [
        "rds:AddTagsToResource",
        "rds:RemoveTagsFromResource",
        "rds:StartDBInstance",
        "rds:StopDBInstance",
        "rds:CreateDBSnapshot"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Sub": "arn:${AWS::Partition}:rds:*:${AWS::AccountId}:db:*"
       }
      },
      {
       "Action": [
        "rds:AddTagsToResource",
        "rds:RemoveTagsFromResource",
        "rds:StartDBCluster",
        "rds:StopDBCluster",
        "rds:CreateDBClusterSnapshot"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::Sub": "arn:${AWS::Partition}:rds:*:${AWS::AccountId}:cluster:*"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "SchedulerRoleSchedulingPermissions2C1B256A",
    "Roles": [
     {
      "Ref": "SchedulerRole59E73443"
     }
    ]
   },
   "Metadata": {
    "cfn_nag": {
     "rules_to_suppress": [
      {
       "id": "W12",
       "reason": "required scheduling permissions"
      }
     ]
    },
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "required scheduling permissions",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::arn:<AWS::Partition>:rds:*:<AWS::AccountId>:db:*",
        "Resource::arn:<AWS::Partition>:rds:*:<AWS::AccountId>:cluster:*",
        "Resource::arn:<AWS::Partition>:ec2:*:<AWS::AccountId>:instance/*",
        "Resource::arn:<AWS::Partition>:rds:*:<AWS::AccountId>:snapshot:*",
        "Resource::*"
       ]
      }
     ]
    }
   }
  },
  "SchedulerRoleKmsPermissionsBF1B9F02": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "kms:CreateGrant",
       "Condition": {
        "Bool": {
         "kms:GrantIsForAWSResource": true
        },
        "StringLike": {
         "kms:ViaService": "ec2.*.amazonaws.com"
        },
        "ForAllValues:StringEquals": {
         "kms:GrantOperations": [
          "Decrypt"
         ],
         "kms:EncryptionContextKeys": [
          "aws:ebs:id"
         ]
        },
        "Null": {
         "kms:EncryptionContextKeys": false,
         "kms:GrantOperations": false
        }
       },
       "Effect": "Allow",
       "Resource": {
        "Ref": "KmsKeyArns"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "SchedulerRoleKmsPermissionsBF1B9F02",
    "Roles": [
     {
      "Ref": "SchedulerRole59E73443"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/SchedulerRole/KmsPermissions/Resource",
    "cdk_nag": {
     "rules_to_suppress": [
      {
       "reason": "Specific kms keys are unknown until runtime, for security, access is instead restricted to only granting decryption permissions to the ec2 service for encrypted EBS volumes",
       "id": "AwsSolutions-IAM5",
       "applies_to": [
        "Resource::*"
       ]
      }
     ]
    }
   },
   "Condition": "SchedulerRolekmsAccessCondition93ED0C6C"
  },
  "OperationalInsightsDashboardE3C49DFC": {
   "Type": "AWS::CloudWatch::Dashboard",
   "Properties": {
    "DashboardBody": {
     "Fn::Join": [
      "",
      [
       "{\"start\":\"-P7D\",\"periodOverride\":\"inherit\",\"widgets\":[{\"type\":\"text\",\"width\":24,\"height\":1,\"x\":0,\"y\":0,\"properties\":{\"markdown\":\"# EC2\"}},{\"type\":\"metric\",\"width\":6,\"height\":6,\"x\":0,\"y\":1,\"properties\":{\"view\":\"singleValue\",\"title\":\"Total EC2 Instances Controlled\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[{\"label\":\"EC2 Instances\",\"expression\":\"SUM(SEARCH('{\\\"",
       {
        "Ref": "AWS::StackName"
       },
       ":InstanceScheduler\\\",Service,InstanceType,SchedulingInterval} \\\"Service\\\"=\\\"ec2\\\" \\\"SchedulingInterval\\\"=\\\"",
       {
        "Ref": "SchedulerFrequency"
       },
       "\\\" MetricName=ManagedInstances', 'Sum', ",
       {
        "Fn::FindInMap": [
         "MetricsSchedulingIntervalToSeconds",
         "MinutesToSeconds",
         {
          "Ref": "SchedulerFrequency"
         }
        ]
       },
       "))\"}]],\"period\":",
       {
        "Fn::FindInMap": [
         "MetricsSchedulingIntervalToSeconds",
         "MinutesToSeconds",
         {
          "Ref": "SchedulerFrequency"
         }
        ]
       },
       "}},{\"type\":\"metric\",\"width\":6,\"height\":6,\"x\":6,\"y\":1,\"properties\":{\"view\":\"pie\",\"title\":\"EC2 Instances Controlled\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[{\"label\":\"[${LAST}]\",\"expression\":\"SEARCH('{\\\"",
       {
        "Ref": "AWS::StackName"
       },
       ":InstanceScheduler\\\",Service,InstanceType,SchedulingInterval} \\\"Service\\\"=\\\"ec2\\\" \\\"SchedulingInterval\\\"=\\\"",
       {
        "Ref": "SchedulerFrequency"
       },
       "\\\" MetricName=ManagedInstances', 'Sum', ",
       {
        "Fn::FindInMap": [
         "MetricsSchedulingIntervalToSeconds",
         "MinutesToSeconds",
         {
          "Ref": "SchedulerFrequency"
         }
        ]
       },
       ")\"}]],\"yAxis\":{},\"legend\":{\"position\":\"right\"},\"period\":",
       {
        "Fn::FindInMap": [
         "MetricsSchedulingIntervalToSeconds",
         "MinutesToSeconds",
         {
          "Ref": "SchedulerFrequency"
         }
        ]
       },
       "}},{\"type\":\"metric\",\"width\":6,\"height\":6,\"x\":12,\"y\":1,\"properties\":{\"view\":\"singleValue\",\"title\":\"Total EC2 Hours Saved\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[{\"label\":\"Hours Saved\",\"expression\":\"SUM(SEARCH('{\\\"",
       {
        "Ref": "AWS::StackName"
       },
       ":InstanceScheduler\\\",Service,InstanceType,SchedulingInterval} Service=\\\"ec2\\\" \\\"SchedulingInterval\\\"=\\\"",
       {
        "Ref": "SchedulerFrequency"
       },
       "\\\" MetricName=\\\"StoppedInstances\\\"', 'Sum', ",
       {
        "Fn::FindInMap": [
         "MetricsSchedulingIntervalToSeconds",
         "MinutesToSeconds",
         {
          "Ref": "SchedulerFrequency"
         }
        ]
       },
       ")) * ",
       {
        "Ref": "SchedulerFrequency"
       },
       " / 60\"}]],\"setPeriodToTimeRange\":true}},{\"type\":\"metric\",\"width\":6,\"height\":6,\"x\":18,\"y\":1,\"properties\":{\"view\":\"pie\",\"title\":\"EC2 Hours Saved\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[{\"label\":\"[${SUM}]\",\"expression\":\"SEARCH('{\\\"",
       {
        "Ref": "AWS::StackName"
       },
       ":InstanceScheduler\\\",Service,InstanceType,SchedulingInterval} Service=\\\"ec2\\\" \\\"SchedulingInterval\\\"=\\\"",
       {
        "Ref": "SchedulerFrequency"
       },
       "\\\" MetricName=\\\"StoppedInstances\\\"', 'Sum', ",
       {
        "Fn::FindInMap": [
         "MetricsSchedulingIntervalToSeconds",
         "MinutesToSeconds",
         {
          "Ref": "SchedulerFrequency"
         }
        ]
       },
       ") * ",
       {
        "Ref": "SchedulerFrequency"
       },
       " / 60\"}]],\"yAxis\":{},\"legend\":{\"position\":\"right\"},\"setPeriodToTimeRange\":true,\"stat\":\"Sum\"}},{\"type\":\"metric\",\"width\":12,\"height\":6,\"x\":0,\"y\":7,\"properties\":{\"view\":\"timeSeries\",\"title\":\"Controlled EC2 Instances by Type\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[{\"expression\":\"SEARCH('{\\\"",
       {
        "Ref": "AWS::StackName"
       },
       ":InstanceScheduler\\\",Service,InstanceType,SchedulingInterval} \\\"Service\\\"=\\\"ec2\\\" \\\"SchedulingInterval\\\"=\\\"",
       {
        "Ref": "SchedulerFrequency"
       },
       "\\\" MetricName=ManagedInstances', 'Sum', ",
       {
        "Fn::FindInMap": [
         "MetricsSchedulingIntervalToSeconds",
         "MinutesToSeconds",
         {
          "Ref": "SchedulerFrequency"
         }
        ]
       },
       ")\"}]],\"yAxis\":{\"left\":{\"label\":\"EC2 Instances\",\"showUnits\":false,\"min\":0}},\"legend\":{\"position\":\"bottom\"}}},{\"type\":\"metric\",\"width\":12,\"height\":6,\"x\":12,\"y\":7,\"properties\":{\"view\":\"timeSeries\",\"title\":\"Running EC2 Instances by Type\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[{\"expression\":\"SEARCH('{\\\"",
       {
        "Ref": "AWS::StackName"
       },
       ":InstanceScheduler\\\",Service,InstanceType,SchedulingInterval} Service=\\\"ec2\\\" \\\"SchedulingInterval\\\"=\\\"",
       {
        "Ref": "SchedulerFrequency"
       },
       "\\\" MetricName=\\\"RunningInstances\\\"', 'Sum', ",
       {
        "Fn::FindInMap": [
         "MetricsSchedulingIntervalToSeconds",
         "MinutesToSeconds",
         {
          "Ref": "SchedulerFrequency"
         }
        ]
       },
       ")\"}]],\"yAxis\":{\"left\":{\"label\":\"Running EC2 Instances\",\"showUnits\":false,\"min\":0}},\"legend\":{\"position\":\"bottom\"}}},{\"type\":\"metric\",\"width\":12,\"height\":6,\"x\":0,\"y\":13,\"properties\":{\"view\":\"timeSeries\",\"title\":\"Controlled EC2 Instances by Schedule\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[{\"expression\":\"SEARCH('{\\\"",
       {
        "Ref": "AWS::StackName"
       },
       ":InstanceScheduler\\\",Service,Schedule,SchedulingInterval} Service=\\\"ec2\\\" \\\"SchedulingInterval\\\"=\\\"",
       {
        "Ref": "SchedulerFrequency"
       },
       "\\\" MetricName=\\\"ManagedInstances\\\"', 'Sum', ",
       {
        "Fn::FindInMap": [
         "MetricsSchedulingIntervalToSeconds",
         "MinutesToSeconds",
         {
          "Ref": "SchedulerFrequency"
         }
        ]
       },
       ")\"}]],\"yAxis\":{\"left\":{\"label\":\"EC2 Instances\",\"showUnits\":false,\"min\":0}},\"legend\":{\"position\":\"bottom\"}}},{\"type\":\"metric\",\"width\":12,\"height\":6,\"x\":12,\"y\":13,\"properties\":{\"view\":\"timeSeries\",\"title\":\"Running EC2 Instances by Schedule\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[{\"expression\":\"SEARCH('{\\\"",
       {
        "Ref": "AWS::StackName"
       },
       ":InstanceScheduler\\\",Service,Schedule,SchedulingInterval} Service=\\\"ec2\\\" \\\"SchedulingInterval\\\"=\\\"",
       {
        "Ref": "SchedulerFrequency"
       },
       "\\\" MetricName=\\\"RunningInstances\\\"', 'Sum', ",
       {
        "Fn::FindInMap": [
         "MetricsSchedulingIntervalToSeconds",
         "MinutesToSeconds",
         {
          "Ref": "SchedulerFrequency"
         }
        ]
       },
       ")\"}]],\"yAxis\":{\"left\":{\"label\":\"Running EC2 Instances\",\"showUnits\":false,\"min\":0}},\"legend\":{\"position\":\"bottom\"}}},{\"type\":\"text\",\"width\":24,\"height\":1,\"x\":0,\"y\":19,\"properties\":{\"markdown\":\"# RDS\"}},{\"type\":\"metric\",\"width\":6,\"height\":6,\"x\":0,\"y\":20,\"properties\":{\"view\":\"singleValue\",\"title\":\"Total RDS Instances Controlled\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[{\"label\":\"RDS Instances\",\"expression\":\"SUM(SEARCH('{\\\"",
       {
        "Ref": "AWS::StackName"
       },
       ":InstanceScheduler\\\",Service,InstanceType,SchedulingInterval} \\\"Service\\\"=\\\"rds\\\" \\\"SchedulingInterval\\\"=\\\"",
       {
        "Ref": "SchedulerFrequency"
       },
       "\\\" MetricName=ManagedInstances', 'Sum', ",
       {
        "Fn::FindInMap": [
         "MetricsSchedulingIntervalToSeconds",
         "MinutesToSeconds",
         {
          "Ref": "SchedulerFrequency"
         }
        ]
       },
       "))\"}]],\"period\":",
       {
        "Fn::FindInMap": [
         "MetricsSchedulingIntervalToSeconds",
         "MinutesToSeconds",
         {
          "Ref": "SchedulerFrequency"
         }
        ]
       },
       "}},{\"type\":\"metric\",\"width\":6,\"height\":6,\"x\":6,\"y\":20,\"properties\":{\"view\":\"pie\",\"title\":\"RDS Instances Controlled\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[{\"label\":\"[${LAST}]\",\"expression\":\"SEARCH('{\\\"",
       {
        "Ref": "AWS::StackName"
       },
       ":InstanceScheduler\\\",Service,InstanceType,SchedulingInterval} \\\"Service\\\"=\\\"rds\\\" \\\"SchedulingInterval\\\"=\\\"",
       {
        "Ref": "SchedulerFrequency"
       },
       "\\\" MetricName=\\\"ManagedInstances\\\"', 'Sum', ",
       {
        "Fn::FindInMap": [
         "MetricsSchedulingIntervalToSeconds",
         "MinutesToSeconds",
         {
          "Ref": "SchedulerFrequency"
         }
        ]
       },
       ")\"}]],\"yAxis\":{},\"legend\":{\"position\":\"right\"},\"period\":",
       {
        "Fn::FindInMap": [
         "MetricsSchedulingIntervalToSeconds",
         "MinutesToSeconds",
         {
          "Ref": "SchedulerFrequency"
         }
        ]
       },
       "}},{\"type\":\"metric\",\"width\":6,\"height\":6,\"x\":12,\"y\":20,\"properties\":{\"view\":\"singleValue\",\"title\":\"Total RDS Hours Saved\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[{\"label\":\"Hours Saved\",\"expression\":\"SUM(SEARCH('{\\\"",
       {
        "Ref": "AWS::StackName"
       },
       ":InstanceScheduler\\\",Service,InstanceType,SchedulingInterval} Service=\\\"rds\\\" \\\"SchedulingInterval\\\"=\\\"",
       {
        "Ref": "SchedulerFrequency"
       },
       "\\\" MetricName=\\\"StoppedInstances\\\"', 'Sum', ",
       {
        "Fn::FindInMap": [
         "MetricsSchedulingIntervalToSeconds",
         "MinutesToSeconds",
         {
          "Ref": "SchedulerFrequency"
         }
        ]
       },
       ")) * ",
       {
        "Ref": "SchedulerFrequency"
       },
       " / 60\"}]],\"setPeriodToTimeRange\":true}},{\"type\":\"metric\",\"width\":6,\"height\":6,\"x\":18,\"y\":20,\"properties\":{\"view\":\"pie\",\"title\":\"RDS Hours Saved\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[{\"label\":\"[${SUM}]\",\"expression\":\"SEARCH('{\\\"",
       {
        "Ref": "AWS::StackName"
       },
       ":InstanceScheduler\\\",Service,InstanceType,SchedulingInterval} Service=\\\"rds\\\" \\\"SchedulingInterval\\\"=\\\"",
       {
        "Ref": "SchedulerFrequency"
       },
       "\\\" MetricName=\\\"StoppedInstances\\\"', 'Sum', ",
       {
        "Fn::FindInMap": [
         "MetricsSchedulingIntervalToSeconds",
         "MinutesToSeconds",
         {
          "Ref": "SchedulerFrequency"
         }
        ]
       },
       ") * ",
       {
        "Ref": "SchedulerFrequency"
       },
       " / 60\",\"period\":2592000}]],\"yAxis\":{},\"legend\":{\"position\":\"right\"},\"setPeriodToTimeRange\":true,\"stat\":\"Sum\"}},{\"type\":\"metric\",\"width\":12,\"height\":6,\"x\":0,\"y\":26,\"properties\":{\"view\":\"timeSeries\",\"title\":\"Controlled RDS Instances by Type\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[{\"expression\":\"SEARCH('{\\\"",
       {
        "Ref": "AWS::StackName"
       },
       ":InstanceScheduler\\\",Service,InstanceType,SchedulingInterval} \\\"Service\\\"=\\\"rds\\\" \\\"SchedulingInterval\\\"=\\\"",
       {
        "Ref": "SchedulerFrequency"
       },
       "\\\" MetricName=\\\"ManagedInstances\\\"', 'Sum', ",
       {
        "Fn::FindInMap": [
         "MetricsSchedulingIntervalToSeconds",
         "MinutesToSeconds",
         {
          "Ref": "SchedulerFrequency"
         }
        ]
       },
       ")\"}]],\"yAxis\":{\"left\":{\"label\":\"Controlled RDS Instances\",\"showUnits\":false,\"min\":0}},\"legend\":{\"position\":\"bottom\"}}},{\"type\":\"metric\",\"width\":12,\"height\":6,\"x\":12,\"y\":26,\"properties\":{\"view\":\"timeSeries\",\"title\":\"Running RDS Instances By Type\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[{\"expression\":\"SEARCH('{\\\"",
       {
        "Ref": "AWS::StackName"
       },
       ":InstanceScheduler\\\",Service,InstanceType,SchedulingInterval} Service=\\\"rds\\\" \\\"SchedulingInterval\\\"=\\\"",
       {
        "Ref": "SchedulerFrequency"
       },
       "\\\" MetricName=\\\"RunningInstances\\\"', 'Sum', ",
       {
        "Fn::FindInMap": [
         "MetricsSchedulingIntervalToSeconds",
         "MinutesToSeconds",
         {
          "Ref": "SchedulerFrequency"
         }
        ]
       },
       ")\"}]],\"yAxis\":{\"left\":{\"label\":\"Running RDS Instances\",\"showUnits\":false,\"min\":0}},\"legend\":{\"position\":\"bottom\"}}},{\"type\":\"metric\",\"width\":12,\"height\":6,\"x\":0,\"y\":32,\"properties\":{\"view\":\"timeSeries\",\"title\":\"Controlled RDS Instances By Schedule\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[{\"expression\":\"SEARCH('{\\\"",
       {
        "Ref": "AWS::StackName"
       },
       ":InstanceScheduler\\\",Service,Schedule,SchedulingInterval} Service=\\\"rds\\\" \\\"SchedulingInterval\\\"=\\\"",
       {
        "Ref": "SchedulerFrequency"
       },
       "\\\" MetricName=\\\"ManagedInstances\\\"', 'Sum', ",
       {
        "Fn::FindInMap": [
         "MetricsSchedulingIntervalToSeconds",
         "MinutesToSeconds",
         {
          "Ref": "SchedulerFrequency"
         }
        ]
       },
       ")\"}]],\"yAxis\":{\"left\":{\"label\":\"Controlled RDS Instances\",\"showUnits\":false,\"min\":0}},\"legend\":{\"position\":\"bottom\"}}},{\"type\":\"metric\",\"width\":12,\"height\":6,\"x\":12,\"y\":32,\"properties\":{\"view\":\"timeSeries\",\"title\":\"Running RDS Instances by Schedule\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[{\"expression\":\"SEARCH('{\\\"",
       {
        "Ref": "AWS::StackName"
       },
       ":InstanceScheduler\\\",Service,Schedule,SchedulingInterval} Service=\\\"rds\\\" \\\"SchedulingInterval\\\"=\\\"",
       {
        "Ref": "SchedulerFrequency"
       },
       "\\\" MetricName=\\\"RunningInstances\\\"', 'Sum', ",
       {
        "Fn::FindInMap": [
         "MetricsSchedulingIntervalToSeconds",
         "MinutesToSeconds",
         {
          "Ref": "SchedulerFrequency"
         }
        ]
       },
       ")\"}]],\"yAxis\":{\"left\":{\"label\":\"Running RDS Instances\",\"showUnits\":false,\"min\":0}},\"legend\":{\"position\":\"bottom\"}}},{\"type\":\"text\",\"width\":24,\"height\":1,\"x\":0,\"y\":38,\"properties\":{\"markdown\":\"# Lambda\"}},{\"type\":\"metric\",\"width\":12,\"height\":6,\"x\":0,\"y\":39,\"properties\":{\"view\":\"timeSeries\",\"title\":\"Lambda Duration (P99)\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"",
       {
        "Ref": "SchedulingOrchestratorBB4C4C5A"
       },
       "\",{\"label\":\"Orchestrator\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"",
       {
        "Ref": "schedulingRequestHandlerLambdaC395DC9E"
       },
       "\",{\"label\":\"SchedulingRequestHandler\"}],[\"AWS/Lambda\",\"Duration\",\"FunctionName\",\"",
       {
        "Ref": "ASGHandler0F6D6751"
       },
       "\",{\"label\":\"AsgHandler\"}]],\"annotations\":{\"horizontal\":[{\"value\":300000,\"fill\":\"below\",\"color\":\"#d62728\",\"label\":\"Timeout Threshold (5 minutes)\",\"yAxis\":\"left\"},{\"value\":240000,\"fill\":\"below\",\"color\":\"#ff7f0e\",\"yAxis\":\"left\"},{\"value\":180000,\"fill\":\"below\",\"color\":\"#2ca02c\",\"yAxis\":\"left\"}]},\"yAxis\":{\"left\":{\"label\":\"duration (ms)\",\"showUnits\":false}},\"legend\":{\"position\":\"bottom\"},\"liveData\":true,\"period\":1800,\"stat\":\"p99\"}},{\"type\":\"metric\",\"width\":12,\"height\":6,\"x\":12,\"y\":39,\"properties\":{\"view\":\"timeSeries\",\"title\":\"Lambda Errors\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"",
       {
        "Ref": "SchedulingOrchestratorBB4C4C5A"
       },
       "\",{\"label\":\"Orchestrator\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"",
       {
        "Ref": "schedulingRequestHandlerLambdaC395DC9E"
       },
       "\",{\"label\":\"SchedulingRequestHandler\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"",
       {
        "Ref": "ASGHandler0F6D6751"
       },
       "\",{\"label\":\"AsgHandler\"}]],\"yAxis\":{\"left\":{\"label\":\"Errors\",\"showUnits\":false}},\"legend\":{\"position\":\"bottom\"},\"liveData\":true,\"period\":1800,\"stat\":\"Sum\"}}]}"
      ]
     ]
    },
    "DashboardName": {
     "Fn::Join": [
      "",
      [
       {
        "Ref": "AWS::StackName"
       },
       "-",
       {
        "Ref": "Namespace"
       },
       "-Operational-Insights-Dashboard"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "instance-scheduler-on-aws/OperationalInsightsDashboard/Resource"
   },
   "Condition": "OpsMonitoringCondition"
  }
 },
 "Outputs": {
  "AccountId": {
   "Description": "Hub Account ID - for use in corresponding spoke stack parameter",
   "Value": {
    "Ref": "AWS::AccountId"
   }
  },
  "ConfigurationTable": {
   "Description": "DynamoDB Configuration table ARN",
   "Value": {
    "Fn::GetAtt": [
     "ConfigTable",
     "Arn"
    ]
   }
  },
  "IssueSnsTopicArn": {
   "Description": "Notification SNS Topic ARN",
   "Value": {
    "Ref": "InstanceSchedulerSnsTopic"
   }
  },
  "SchedulerRoleArn": {
   "Description": "Scheduler role ARN",
   "Value": {
    "Fn::GetAtt": [
     "SchedulerRole59E73443",
     "Arn"
    ]
   }
  },
  "ServiceInstanceScheduleServiceToken": {
   "Description": "Custom resource provider ARN - use as ServiceToken property value for CloudFormation Schedules",
   "Value": {
    "Fn::GetAtt": [
     "Main",
     "Arn"
    ]
   }
  }
 }
}